
proyecto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df4  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800598c  0800598c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800598c  0800598c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800598c  0800598c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800598c  0800598c  0001598c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005990  08005990  00015990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000078  08005a0c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  08005a0c  00020584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7fd  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a3  00000000  00000000  0002f8a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00031b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00032b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002117d  00000000  00000000  00033a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001231d  00000000  00000000  00054b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c82a9  00000000  00000000  00066eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f153  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047cc  00000000  00000000  0012f1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b80 	.word	0x08004b80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004b80 	.word	0x08004b80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <microDelay>:
uint8_t TFI = 0;
uint8_t TFD = 0;
char strCopy[15];

void microDelay (uint16_t delay)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <microDelay+0x30>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000abe:	bf00      	nop
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <microDelay+0x30>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d3f9      	bcc.n	8000ac0 <microDelay+0x14>
}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	200000e8 	.word	0x200000e8

08000ae0 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000aea:	463b      	mov	r3, r7
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afc:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b12:	f001 f8bb 	bl	8001c8c <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f001 fa36 	bl	8001f90 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000b24:	2014      	movs	r0, #20
 8000b26:	f000 ffa7 	bl	8001a78 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f001 fa2c 	bl	8001f90 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000b38:	201e      	movs	r0, #30
 8000b3a:	f7ff ffb7 	bl	8000aac <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000b46:	463b      	mov	r3, r7
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f001 f89d 	bl	8001c8c <HAL_GPIO_Init>
  microDelay (40);
 8000b52:	2028      	movs	r0, #40	; 0x28
 8000b54:	f7ff ffaa 	bl	8000aac <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000b58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b60:	f001 f9fe 	bl	8001f60 <HAL_GPIO_ReadPin>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d10d      	bne.n	8000b86 <DHT11_Start+0xa6>
  {
    microDelay (80);
 8000b6a:	2050      	movs	r0, #80	; 0x50
 8000b6c:	f7ff ff9e 	bl	8000aac <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b78:	f001 f9f2 	bl	8001f60 <HAL_GPIO_ReadPin>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <DHT11_Start+0xa6>
 8000b82:	2301      	movs	r3, #1
 8000b84:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000b86:	f000 ff6b 	bl	8001a60 <HAL_GetTick>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <DHT11_Start+0xf0>)
 8000b8e:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000b90:	f000 ff66 	bl	8001a60 <HAL_GetTick>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <DHT11_Start+0xf4>)
 8000b98:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000b9a:	e004      	b.n	8000ba6 <DHT11_Start+0xc6>
  {
    cMillis = HAL_GetTick();
 8000b9c:	f000 ff60 	bl	8001a60 <HAL_GetTick>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <DHT11_Start+0xf4>)
 8000ba4:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000ba6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f001 f9d7 	bl	8001f60 <HAL_GPIO_ReadPin>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d006      	beq.n	8000bc6 <DHT11_Start+0xe6>
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <DHT11_Start+0xf0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	1c9a      	adds	r2, r3, #2
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <DHT11_Start+0xf4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d8ea      	bhi.n	8000b9c <DHT11_Start+0xbc>
  }
  return Response;
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000013c 	.word	0x2000013c
 8000bd4:	20000140 	.word	0x20000140

08000bd8 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	71fb      	strb	r3, [r7, #7]
 8000be2:	e069      	b.n	8000cb8 <DHT11_Read+0xe0>
  {
    pMillis = HAL_GetTick();
 8000be4:	f000 ff3c 	bl	8001a60 <HAL_GetTick>
 8000be8:	4603      	mov	r3, r0
 8000bea:	4a37      	ldr	r2, [pc, #220]	; (8000cc8 <DHT11_Read+0xf0>)
 8000bec:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000bee:	f000 ff37 	bl	8001a60 <HAL_GetTick>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a35      	ldr	r2, [pc, #212]	; (8000ccc <DHT11_Read+0xf4>)
 8000bf6:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000bf8:	e004      	b.n	8000c04 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8000bfa:	f000 ff31 	bl	8001a60 <HAL_GetTick>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a32      	ldr	r2, [pc, #200]	; (8000ccc <DHT11_Read+0xf4>)
 8000c02:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000c04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0c:	f001 f9a8 	bl	8001f60 <HAL_GPIO_ReadPin>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d106      	bne.n	8000c24 <DHT11_Read+0x4c>
 8000c16:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <DHT11_Read+0xf0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	1c9a      	adds	r2, r3, #2
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <DHT11_Read+0xf4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8ea      	bhi.n	8000bfa <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8000c24:	2028      	movs	r0, #40	; 0x28
 8000c26:	f7ff ff41 	bl	8000aac <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000c2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c32:	f001 f995 	bl	8001f60 <HAL_GPIO_ReadPin>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d10e      	bne.n	8000c5a <DHT11_Read+0x82>
      b&= ~(1<<(7-a));
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2201      	movs	r2, #1
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	b25a      	sxtb	r2, r3
 8000c4e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c52:	4013      	ands	r3, r2
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	71bb      	strb	r3, [r7, #6]
 8000c58:	e00b      	b.n	8000c72 <DHT11_Read+0x9a>
    else
      b|= (1<<(7-a));
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f1c3 0307 	rsb	r3, r3, #7
 8000c60:	2201      	movs	r2, #1
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	b25a      	sxtb	r2, r3
 8000c68:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b25b      	sxtb	r3, r3
 8000c70:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8000c72:	f000 fef5 	bl	8001a60 <HAL_GetTick>
 8000c76:	4603      	mov	r3, r0
 8000c78:	4a13      	ldr	r2, [pc, #76]	; (8000cc8 <DHT11_Read+0xf0>)
 8000c7a:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000c7c:	f000 fef0 	bl	8001a60 <HAL_GetTick>
 8000c80:	4603      	mov	r3, r0
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <DHT11_Read+0xf4>)
 8000c84:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000c86:	e004      	b.n	8000c92 <DHT11_Read+0xba>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8000c88:	f000 feea 	bl	8001a60 <HAL_GetTick>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <DHT11_Read+0xf4>)
 8000c90:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9a:	f001 f961 	bl	8001f60 <HAL_GPIO_ReadPin>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d006      	beq.n	8000cb2 <DHT11_Read+0xda>
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <DHT11_Read+0xf0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	1c9a      	adds	r2, r3, #2
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <DHT11_Read+0xf4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d8ea      	bhi.n	8000c88 <DHT11_Read+0xb0>
  for (a=0;a<8;a++)
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	71fb      	strb	r3, [r7, #7]
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2b07      	cmp	r3, #7
 8000cbc:	d992      	bls.n	8000be4 <DHT11_Read+0xc>
    }
  }
  return b;
 8000cbe:	79bb      	ldrb	r3, [r7, #6]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	2000013c 	.word	0x2000013c
 8000ccc:	20000140 	.word	0x20000140

08000cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	ed2d 8b02 	vpush	{d8}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cda:	f000 fe58 	bl	800198e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cde:	f000 f915 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce2:	f000 f9f9 	bl	80010d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ce6:	f000 f963 	bl	8000fb0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000cea:	f000 f9a1 	bl	8001030 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000cee:	4875      	ldr	r0, [pc, #468]	; (8000ec4 <main+0x1f4>)
 8000cf0:	f003 f82c 	bl	8003d4c <HAL_TIM_Base_Start>
  SSD1306_Init();
 8000cf4:	f000 fa36 	bl	8001164 <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if(DHT11_Start())
 8000cf8:	f7ff fef2 	bl	8000ae0 <DHT11_Start>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 80da 	beq.w	8000eb8 <main+0x1e8>
	    {
	      RHI = DHT11_Read(); // Relative humidity integral
 8000d04:	f7ff ff68 	bl	8000bd8 <DHT11_Read>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b6e      	ldr	r3, [pc, #440]	; (8000ec8 <main+0x1f8>)
 8000d0e:	701a      	strb	r2, [r3, #0]
	      RHD = DHT11_Read(); // Relative humidity decimal
 8000d10:	f7ff ff62 	bl	8000bd8 <DHT11_Read>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	4b6c      	ldr	r3, [pc, #432]	; (8000ecc <main+0x1fc>)
 8000d1a:	701a      	strb	r2, [r3, #0]
	      TCI = DHT11_Read(); // Celsius integral
 8000d1c:	f7ff ff5c 	bl	8000bd8 <DHT11_Read>
 8000d20:	4603      	mov	r3, r0
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b6a      	ldr	r3, [pc, #424]	; (8000ed0 <main+0x200>)
 8000d26:	701a      	strb	r2, [r3, #0]
	      TCD = DHT11_Read(); // Celsius decimal
 8000d28:	f7ff ff56 	bl	8000bd8 <DHT11_Read>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4b68      	ldr	r3, [pc, #416]	; (8000ed4 <main+0x204>)
 8000d32:	701a      	strb	r2, [r3, #0]
	      SUM = DHT11_Read(); // Check sum
 8000d34:	f7ff ff50 	bl	8000bd8 <DHT11_Read>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b66      	ldr	r3, [pc, #408]	; (8000ed8 <main+0x208>)
 8000d3e:	701a      	strb	r2, [r3, #0]
	      if (RHI + RHD + TCI + TCD == SUM)
 8000d40:	4b61      	ldr	r3, [pc, #388]	; (8000ec8 <main+0x1f8>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b61      	ldr	r3, [pc, #388]	; (8000ecc <main+0x1fc>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a60      	ldr	r2, [pc, #384]	; (8000ed0 <main+0x200>)
 8000d4e:	7812      	ldrb	r2, [r2, #0]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a60      	ldr	r2, [pc, #384]	; (8000ed4 <main+0x204>)
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a5f      	ldr	r2, [pc, #380]	; (8000ed8 <main+0x208>)
 8000d5a:	7812      	ldrb	r2, [r2, #0]
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	f040 80ab 	bne.w	8000eb8 <main+0x1e8>
	      {
	        // Can use RHI and TCI for any purposes if whole number only needed
	        tCelsius = (float)TCI + (float)(TCD/10.0);
 8000d62:	4b5b      	ldr	r3, [pc, #364]	; (8000ed0 <main+0x200>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000d6e:	4b59      	ldr	r3, [pc, #356]	; (8000ed4 <main+0x204>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fbce 	bl	8000514 <__aeabi_i2d>
 8000d78:	f04f 0200 	mov.w	r2, #0
 8000d7c:	4b57      	ldr	r3, [pc, #348]	; (8000edc <main+0x20c>)
 8000d7e:	f7ff fd5d 	bl	800083c <__aeabi_ddiv>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f7ff fe3f 	bl	8000a0c <__aeabi_d2f>
 8000d8e:	ee07 0a90 	vmov	s15, r0
 8000d92:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000d96:	4b52      	ldr	r3, [pc, #328]	; (8000ee0 <main+0x210>)
 8000d98:	edc3 7a00 	vstr	s15, [r3]
	        tFahrenheit = tCelsius * 9/5 + 32;
 8000d9c:	4b50      	ldr	r3, [pc, #320]	; (8000ee0 <main+0x210>)
 8000d9e:	edd3 7a00 	vldr	s15, [r3]
 8000da2:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000da6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000daa:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000dae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000db2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8000ee4 <main+0x214>
 8000db6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000dba:	4b4b      	ldr	r3, [pc, #300]	; (8000ee8 <main+0x218>)
 8000dbc:	edc3 7a00 	vstr	s15, [r3]
	        RH = (float)RHI + (float)(RHD/10.0);
 8000dc0:	4b41      	ldr	r3, [pc, #260]	; (8000ec8 <main+0x1f8>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	ee07 3a90 	vmov	s15, r3
 8000dc8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000dcc:	4b3f      	ldr	r3, [pc, #252]	; (8000ecc <main+0x1fc>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fb9f 	bl	8000514 <__aeabi_i2d>
 8000dd6:	f04f 0200 	mov.w	r2, #0
 8000dda:	4b40      	ldr	r3, [pc, #256]	; (8000edc <main+0x20c>)
 8000ddc:	f7ff fd2e 	bl	800083c <__aeabi_ddiv>
 8000de0:	4602      	mov	r2, r0
 8000de2:	460b      	mov	r3, r1
 8000de4:	4610      	mov	r0, r2
 8000de6:	4619      	mov	r1, r3
 8000de8:	f7ff fe10 	bl	8000a0c <__aeabi_d2f>
 8000dec:	ee07 0a90 	vmov	s15, r0
 8000df0:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000df4:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <main+0x21c>)
 8000df6:	edc3 7a00 	vstr	s15, [r3]
	        // Can use tCelsius, tFahrenheit and RH for any purposes
	        TFI = tFahrenheit;  // Fahrenheit integral
 8000dfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ee8 <main+0x218>)
 8000dfc:	edd3 7a00 	vldr	s15, [r3]
 8000e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e04:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e08:	793b      	ldrb	r3, [r7, #4]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	4b38      	ldr	r3, [pc, #224]	; (8000ef0 <main+0x220>)
 8000e0e:	701a      	strb	r2, [r3, #0]
	        TFD = tFahrenheit*10-TFI*10; // Fahrenheit decimal
 8000e10:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <main+0x218>)
 8000e12:	edd3 7a00 	vldr	s15, [r3]
 8000e16:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000e1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e1e:	4b34      	ldr	r3, [pc, #208]	; (8000ef0 <main+0x220>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	ee07 3a90 	vmov	s15, r3
 8000e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e3c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e40:	793b      	ldrb	r3, [r7, #4]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <main+0x224>)
 8000e46:	701a      	strb	r2, [r3, #0]
	        sprintf(strCopy,"%d.%d C   ", TCI, TCD);
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <main+0x200>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <main+0x204>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	4929      	ldr	r1, [pc, #164]	; (8000ef8 <main+0x228>)
 8000e54:	4829      	ldr	r0, [pc, #164]	; (8000efc <main+0x22c>)
 8000e56:	f003 fa25 	bl	80042a4 <siprintf>
	        SSD1306_GotoXY (0, 0);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f000 faeb 	bl	8001438 <SSD1306_GotoXY>
	        SSD1306_Puts (strCopy, &Font_11x18, 1);
 8000e62:	2201      	movs	r2, #1
 8000e64:	4926      	ldr	r1, [pc, #152]	; (8000f00 <main+0x230>)
 8000e66:	4825      	ldr	r0, [pc, #148]	; (8000efc <main+0x22c>)
 8000e68:	f000 fb7c 	bl	8001564 <SSD1306_Puts>
	        sprintf(strCopy,"%d.%d F   ", TFI, TFD);
 8000e6c:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <main+0x220>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <main+0x224>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	4923      	ldr	r1, [pc, #140]	; (8000f04 <main+0x234>)
 8000e78:	4820      	ldr	r0, [pc, #128]	; (8000efc <main+0x22c>)
 8000e7a:	f003 fa13 	bl	80042a4 <siprintf>
	        SSD1306_GotoXY (0, 20);
 8000e7e:	2114      	movs	r1, #20
 8000e80:	2000      	movs	r0, #0
 8000e82:	f000 fad9 	bl	8001438 <SSD1306_GotoXY>
	        SSD1306_Puts (strCopy, &Font_11x18, 1);
 8000e86:	2201      	movs	r2, #1
 8000e88:	491d      	ldr	r1, [pc, #116]	; (8000f00 <main+0x230>)
 8000e8a:	481c      	ldr	r0, [pc, #112]	; (8000efc <main+0x22c>)
 8000e8c:	f000 fb6a 	bl	8001564 <SSD1306_Puts>
	        sprintf(strCopy,"%d.%d %%  ", RHI, RHD);
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <main+0x1f8>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <main+0x1fc>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	491b      	ldr	r1, [pc, #108]	; (8000f08 <main+0x238>)
 8000e9c:	4817      	ldr	r0, [pc, #92]	; (8000efc <main+0x22c>)
 8000e9e:	f003 fa01 	bl	80042a4 <siprintf>
	        SSD1306_GotoXY (0, 40);
 8000ea2:	2128      	movs	r1, #40	; 0x28
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f000 fac7 	bl	8001438 <SSD1306_GotoXY>
	        SSD1306_Puts (strCopy, &Font_11x18, 1);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4914      	ldr	r1, [pc, #80]	; (8000f00 <main+0x230>)
 8000eae:	4813      	ldr	r0, [pc, #76]	; (8000efc <main+0x22c>)
 8000eb0:	f000 fb58 	bl	8001564 <SSD1306_Puts>
	        SSD1306_UpdateScreen();
 8000eb4:	f000 fa1a 	bl	80012ec <SSD1306_UpdateScreen>
	      }
	    }
	    HAL_Delay(2000);
 8000eb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ebc:	f000 fddc 	bl	8001a78 <HAL_Delay>
	    if(DHT11_Start())
 8000ec0:	e71a      	b.n	8000cf8 <main+0x28>
 8000ec2:	bf00      	nop
 8000ec4:	200000e8 	.word	0x200000e8
 8000ec8:	20000134 	.word	0x20000134
 8000ecc:	20000135 	.word	0x20000135
 8000ed0:	20000136 	.word	0x20000136
 8000ed4:	20000137 	.word	0x20000137
 8000ed8:	20000138 	.word	0x20000138
 8000edc:	40240000 	.word	0x40240000
 8000ee0:	20000144 	.word	0x20000144
 8000ee4:	42000000 	.word	0x42000000
 8000ee8:	20000148 	.word	0x20000148
 8000eec:	2000014c 	.word	0x2000014c
 8000ef0:	20000150 	.word	0x20000150
 8000ef4:	20000151 	.word	0x20000151
 8000ef8:	08004b98 	.word	0x08004b98
 8000efc:	20000154 	.word	0x20000154
 8000f00:	20000000 	.word	0x20000000
 8000f04:	08004ba4 	.word	0x08004ba4
 8000f08:	08004bb0 	.word	0x08004bb0

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b096      	sub	sp, #88	; 0x58
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	2244      	movs	r2, #68	; 0x44
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f003 f9ba 	bl	8004294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	463b      	mov	r3, r7
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f32:	f001 fd75 	bl	8002a20 <HAL_PWREx_ControlVoltageScaling>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f3c:	f000 f90c 	bl	8001158 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f40:	2310      	movs	r3, #16
 8000f42:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f44:	2301      	movs	r3, #1
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f4c:	2360      	movs	r3, #96	; 0x60
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f50:	2302      	movs	r3, #2
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f54:	2301      	movs	r3, #1
 8000f56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000f5c:	2324      	movs	r3, #36	; 0x24
 8000f5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f60:	2307      	movs	r3, #7
 8000f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 fdab 	bl	8002acc <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f7c:	f000 f8ec 	bl	8001158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	230f      	movs	r3, #15
 8000f82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f84:	2303      	movs	r3, #3
 8000f86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	2104      	movs	r1, #4
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f002 f9ab 	bl	80032f4 <HAL_RCC_ClockConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fa4:	f000 f8d8 	bl	8001158 <Error_Handler>
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3758      	adds	r7, #88	; 0x58
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fb6:	4a1c      	ldr	r2, [pc, #112]	; (8001028 <MX_I2C1_Init+0x78>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702681;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fbc:	4a1b      	ldr	r2, [pc, #108]	; (800102c <MX_I2C1_Init+0x7c>)
 8000fbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fea:	480e      	ldr	r0, [pc, #56]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fec:	f000 ffe8 	bl	8001fc0 <HAL_I2C_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ff6:	f000 f8af 	bl	8001158 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4809      	ldr	r0, [pc, #36]	; (8001024 <MX_I2C1_Init+0x74>)
 8000ffe:	f001 fc69 	bl	80028d4 <HAL_I2CEx_ConfigAnalogFilter>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001008:	f000 f8a6 	bl	8001158 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800100c:	2100      	movs	r1, #0
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_I2C1_Init+0x74>)
 8001010:	f001 fcab 	bl	800296a <HAL_I2CEx_ConfigDigitalFilter>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800101a:	f000 f89d 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000094 	.word	0x20000094
 8001028:	40005400 	.word	0x40005400
 800102c:	00702681 	.word	0x00702681

08001030 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <MX_TIM1_Init+0xa0>)
 8001050:	4a20      	ldr	r2, [pc, #128]	; (80010d4 <MX_TIM1_Init+0xa4>)
 8001052:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <MX_TIM1_Init+0xa0>)
 8001056:	2247      	movs	r2, #71	; 0x47
 8001058:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_TIM1_Init+0xa0>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_TIM1_Init+0xa0>)
 8001062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001066:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_TIM1_Init+0xa0>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <MX_TIM1_Init+0xa0>)
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_TIM1_Init+0xa0>)
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800107a:	4815      	ldr	r0, [pc, #84]	; (80010d0 <MX_TIM1_Init+0xa0>)
 800107c:	f002 fe0e 	bl	8003c9c <HAL_TIM_Base_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001086:	f000 f867 	bl	8001158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	4619      	mov	r1, r3
 8001096:	480e      	ldr	r0, [pc, #56]	; (80010d0 <MX_TIM1_Init+0xa0>)
 8001098:	f002 fea4 	bl	8003de4 <HAL_TIM_ConfigClockSource>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80010a2:	f000 f859 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <MX_TIM1_Init+0xa0>)
 80010b8:	f003 f85c 	bl	8004174 <HAL_TIMEx_MasterConfigSynchronization>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010c2:	f000 f849 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	3720      	adds	r7, #32
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200000e8 	.word	0x200000e8
 80010d4:	40012c00 	.word	0x40012c00

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_GPIO_Init+0x7c>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a18      	ldr	r2, [pc, #96]	; (8001154 <MX_GPIO_Init+0x7c>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_GPIO_Init+0x7c>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_GPIO_Init+0x7c>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <MX_GPIO_Init+0x7c>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <MX_GPIO_Init+0x7c>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001128:	f000 ff32 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800112c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001130:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	4619      	mov	r1, r3
 8001144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001148:	f000 fda0 	bl	8001c8c <HAL_GPIO_Init>

}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40021000 	.word	0x40021000

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	e7fe      	b.n	8001160 <Error_Handler+0x8>
	...

08001164 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800116a:	f000 fa21 	bl	80015b0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800116e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001172:	2201      	movs	r2, #1
 8001174:	2178      	movs	r1, #120	; 0x78
 8001176:	485b      	ldr	r0, [pc, #364]	; (80012e4 <SSD1306_Init+0x180>)
 8001178:	f001 f8a6 	bl	80022c8 <HAL_I2C_IsDeviceReady>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001182:	2300      	movs	r3, #0
 8001184:	e0a9      	b.n	80012da <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001186:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800118a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800118c:	e002      	b.n	8001194 <SSD1306_Init+0x30>
		p--;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3b01      	subs	r3, #1
 8001192:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f9      	bne.n	800118e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800119a:	22ae      	movs	r2, #174	; 0xae
 800119c:	2100      	movs	r1, #0
 800119e:	2078      	movs	r0, #120	; 0x78
 80011a0:	f000 fa82 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80011a4:	2220      	movs	r2, #32
 80011a6:	2100      	movs	r1, #0
 80011a8:	2078      	movs	r0, #120	; 0x78
 80011aa:	f000 fa7d 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80011ae:	2210      	movs	r2, #16
 80011b0:	2100      	movs	r1, #0
 80011b2:	2078      	movs	r0, #120	; 0x78
 80011b4:	f000 fa78 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80011b8:	22b0      	movs	r2, #176	; 0xb0
 80011ba:	2100      	movs	r1, #0
 80011bc:	2078      	movs	r0, #120	; 0x78
 80011be:	f000 fa73 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80011c2:	22c8      	movs	r2, #200	; 0xc8
 80011c4:	2100      	movs	r1, #0
 80011c6:	2078      	movs	r0, #120	; 0x78
 80011c8:	f000 fa6e 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	2078      	movs	r0, #120	; 0x78
 80011d2:	f000 fa69 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80011d6:	2210      	movs	r2, #16
 80011d8:	2100      	movs	r1, #0
 80011da:	2078      	movs	r0, #120	; 0x78
 80011dc:	f000 fa64 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80011e0:	2240      	movs	r2, #64	; 0x40
 80011e2:	2100      	movs	r1, #0
 80011e4:	2078      	movs	r0, #120	; 0x78
 80011e6:	f000 fa5f 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80011ea:	2281      	movs	r2, #129	; 0x81
 80011ec:	2100      	movs	r1, #0
 80011ee:	2078      	movs	r0, #120	; 0x78
 80011f0:	f000 fa5a 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80011f4:	22ff      	movs	r2, #255	; 0xff
 80011f6:	2100      	movs	r1, #0
 80011f8:	2078      	movs	r0, #120	; 0x78
 80011fa:	f000 fa55 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80011fe:	22a1      	movs	r2, #161	; 0xa1
 8001200:	2100      	movs	r1, #0
 8001202:	2078      	movs	r0, #120	; 0x78
 8001204:	f000 fa50 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001208:	22a6      	movs	r2, #166	; 0xa6
 800120a:	2100      	movs	r1, #0
 800120c:	2078      	movs	r0, #120	; 0x78
 800120e:	f000 fa4b 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001212:	22a8      	movs	r2, #168	; 0xa8
 8001214:	2100      	movs	r1, #0
 8001216:	2078      	movs	r0, #120	; 0x78
 8001218:	f000 fa46 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800121c:	223f      	movs	r2, #63	; 0x3f
 800121e:	2100      	movs	r1, #0
 8001220:	2078      	movs	r0, #120	; 0x78
 8001222:	f000 fa41 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001226:	22a4      	movs	r2, #164	; 0xa4
 8001228:	2100      	movs	r1, #0
 800122a:	2078      	movs	r0, #120	; 0x78
 800122c:	f000 fa3c 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001230:	22d3      	movs	r2, #211	; 0xd3
 8001232:	2100      	movs	r1, #0
 8001234:	2078      	movs	r0, #120	; 0x78
 8001236:	f000 fa37 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	2078      	movs	r0, #120	; 0x78
 8001240:	f000 fa32 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001244:	22d5      	movs	r2, #213	; 0xd5
 8001246:	2100      	movs	r1, #0
 8001248:	2078      	movs	r0, #120	; 0x78
 800124a:	f000 fa2d 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800124e:	22f0      	movs	r2, #240	; 0xf0
 8001250:	2100      	movs	r1, #0
 8001252:	2078      	movs	r0, #120	; 0x78
 8001254:	f000 fa28 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001258:	22d9      	movs	r2, #217	; 0xd9
 800125a:	2100      	movs	r1, #0
 800125c:	2078      	movs	r0, #120	; 0x78
 800125e:	f000 fa23 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001262:	2222      	movs	r2, #34	; 0x22
 8001264:	2100      	movs	r1, #0
 8001266:	2078      	movs	r0, #120	; 0x78
 8001268:	f000 fa1e 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800126c:	22da      	movs	r2, #218	; 0xda
 800126e:	2100      	movs	r1, #0
 8001270:	2078      	movs	r0, #120	; 0x78
 8001272:	f000 fa19 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001276:	2212      	movs	r2, #18
 8001278:	2100      	movs	r1, #0
 800127a:	2078      	movs	r0, #120	; 0x78
 800127c:	f000 fa14 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001280:	22db      	movs	r2, #219	; 0xdb
 8001282:	2100      	movs	r1, #0
 8001284:	2078      	movs	r0, #120	; 0x78
 8001286:	f000 fa0f 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800128a:	2220      	movs	r2, #32
 800128c:	2100      	movs	r1, #0
 800128e:	2078      	movs	r0, #120	; 0x78
 8001290:	f000 fa0a 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001294:	228d      	movs	r2, #141	; 0x8d
 8001296:	2100      	movs	r1, #0
 8001298:	2078      	movs	r0, #120	; 0x78
 800129a:	f000 fa05 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800129e:	2214      	movs	r2, #20
 80012a0:	2100      	movs	r1, #0
 80012a2:	2078      	movs	r0, #120	; 0x78
 80012a4:	f000 fa00 	bl	80016a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80012a8:	22af      	movs	r2, #175	; 0xaf
 80012aa:	2100      	movs	r1, #0
 80012ac:	2078      	movs	r0, #120	; 0x78
 80012ae:	f000 f9fb 	bl	80016a8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80012b2:	222e      	movs	r2, #46	; 0x2e
 80012b4:	2100      	movs	r1, #0
 80012b6:	2078      	movs	r0, #120	; 0x78
 80012b8:	f000 f9f6 	bl	80016a8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80012bc:	2000      	movs	r0, #0
 80012be:	f000 f843 	bl	8001348 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80012c2:	f000 f813 	bl	80012ec <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <SSD1306_Init+0x184>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <SSD1306_Init+0x184>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <SSD1306_Init+0x184>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80012d8:	2301      	movs	r3, #1
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000094 	.word	0x20000094
 80012e8:	20000564 	.word	0x20000564

080012ec <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	71fb      	strb	r3, [r7, #7]
 80012f6:	e01d      	b.n	8001334 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	3b50      	subs	r3, #80	; 0x50
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	461a      	mov	r2, r3
 8001300:	2100      	movs	r1, #0
 8001302:	2078      	movs	r0, #120	; 0x78
 8001304:	f000 f9d0 	bl	80016a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	2078      	movs	r0, #120	; 0x78
 800130e:	f000 f9cb 	bl	80016a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001312:	2210      	movs	r2, #16
 8001314:	2100      	movs	r1, #0
 8001316:	2078      	movs	r0, #120	; 0x78
 8001318:	f000 f9c6 	bl	80016a8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	01db      	lsls	r3, r3, #7
 8001320:	4a08      	ldr	r2, [pc, #32]	; (8001344 <SSD1306_UpdateScreen+0x58>)
 8001322:	441a      	add	r2, r3
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	2140      	movs	r1, #64	; 0x40
 8001328:	2078      	movs	r0, #120	; 0x78
 800132a:	f000 f957 	bl	80015dc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	3301      	adds	r3, #1
 8001332:	71fb      	strb	r3, [r7, #7]
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	2b07      	cmp	r3, #7
 8001338:	d9de      	bls.n	80012f8 <SSD1306_UpdateScreen+0xc>
	}
}
 800133a:	bf00      	nop
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000164 	.word	0x20000164

08001348 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <SSD1306_Fill+0x14>
 8001358:	2300      	movs	r3, #0
 800135a:	e000      	b.n	800135e <SSD1306_Fill+0x16>
 800135c:	23ff      	movs	r3, #255	; 0xff
 800135e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001362:	4619      	mov	r1, r3
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <SSD1306_Fill+0x2c>)
 8001366:	f002 ff95 	bl	8004294 <memset>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000164 	.word	0x20000164

08001378 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
 8001382:	460b      	mov	r3, r1
 8001384:	80bb      	strh	r3, [r7, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	70fb      	strb	r3, [r7, #3]
	if (
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	2b7f      	cmp	r3, #127	; 0x7f
 800138e:	d848      	bhi.n	8001422 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001390:	88bb      	ldrh	r3, [r7, #4]
 8001392:	2b3f      	cmp	r3, #63	; 0x3f
 8001394:	d845      	bhi.n	8001422 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <SSD1306_DrawPixel+0xb8>)
 8001398:	791b      	ldrb	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d006      	beq.n	80013ac <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf0c      	ite	eq
 80013a4:	2301      	moveq	r3, #1
 80013a6:	2300      	movne	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80013ac:	78fb      	ldrb	r3, [r7, #3]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d11a      	bne.n	80013e8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013b2:	88fa      	ldrh	r2, [r7, #6]
 80013b4:	88bb      	ldrh	r3, [r7, #4]
 80013b6:	08db      	lsrs	r3, r3, #3
 80013b8:	b298      	uxth	r0, r3
 80013ba:	4603      	mov	r3, r0
 80013bc:	01db      	lsls	r3, r3, #7
 80013be:	4413      	add	r3, r2
 80013c0:	4a1c      	ldr	r2, [pc, #112]	; (8001434 <SSD1306_DrawPixel+0xbc>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	b25a      	sxtb	r2, r3
 80013c6:	88bb      	ldrh	r3, [r7, #4]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	2101      	movs	r1, #1
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b259      	sxtb	r1, r3
 80013d8:	88fa      	ldrh	r2, [r7, #6]
 80013da:	4603      	mov	r3, r0
 80013dc:	01db      	lsls	r3, r3, #7
 80013de:	4413      	add	r3, r2
 80013e0:	b2c9      	uxtb	r1, r1
 80013e2:	4a14      	ldr	r2, [pc, #80]	; (8001434 <SSD1306_DrawPixel+0xbc>)
 80013e4:	54d1      	strb	r1, [r2, r3]
 80013e6:	e01d      	b.n	8001424 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013e8:	88fa      	ldrh	r2, [r7, #6]
 80013ea:	88bb      	ldrh	r3, [r7, #4]
 80013ec:	08db      	lsrs	r3, r3, #3
 80013ee:	b298      	uxth	r0, r3
 80013f0:	4603      	mov	r3, r0
 80013f2:	01db      	lsls	r3, r3, #7
 80013f4:	4413      	add	r3, r2
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <SSD1306_DrawPixel+0xbc>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	b25a      	sxtb	r2, r3
 80013fc:	88bb      	ldrh	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	2101      	movs	r1, #1
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	b25b      	sxtb	r3, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	b25b      	sxtb	r3, r3
 800140e:	4013      	ands	r3, r2
 8001410:	b259      	sxtb	r1, r3
 8001412:	88fa      	ldrh	r2, [r7, #6]
 8001414:	4603      	mov	r3, r0
 8001416:	01db      	lsls	r3, r3, #7
 8001418:	4413      	add	r3, r2
 800141a:	b2c9      	uxtb	r1, r1
 800141c:	4a05      	ldr	r2, [pc, #20]	; (8001434 <SSD1306_DrawPixel+0xbc>)
 800141e:	54d1      	strb	r1, [r2, r3]
 8001420:	e000      	b.n	8001424 <SSD1306_DrawPixel+0xac>
		return;
 8001422:	bf00      	nop
	}
}
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000564 	.word	0x20000564
 8001434:	20000164 	.word	0x20000164

08001438 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	460a      	mov	r2, r1
 8001442:	80fb      	strh	r3, [r7, #6]
 8001444:	4613      	mov	r3, r2
 8001446:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001448:	4a05      	ldr	r2, [pc, #20]	; (8001460 <SSD1306_GotoXY+0x28>)
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800144e:	4a04      	ldr	r2, [pc, #16]	; (8001460 <SSD1306_GotoXY+0x28>)
 8001450:	88bb      	ldrh	r3, [r7, #4]
 8001452:	8053      	strh	r3, [r2, #2]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	20000564 	.word	0x20000564

08001464 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
 8001470:	4613      	mov	r3, r2
 8001472:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001474:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <SSD1306_Putc+0xfc>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
	if (
 8001480:	2b7f      	cmp	r3, #127	; 0x7f
 8001482:	dc07      	bgt.n	8001494 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001484:	4b36      	ldr	r3, [pc, #216]	; (8001560 <SSD1306_Putc+0xfc>)
 8001486:	885b      	ldrh	r3, [r3, #2]
 8001488:	461a      	mov	r2, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	785b      	ldrb	r3, [r3, #1]
 800148e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001490:	2b3f      	cmp	r3, #63	; 0x3f
 8001492:	dd01      	ble.n	8001498 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001494:	2300      	movs	r3, #0
 8001496:	e05e      	b.n	8001556 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	e04b      	b.n	8001536 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	3b20      	subs	r3, #32
 80014a6:	6839      	ldr	r1, [r7, #0]
 80014a8:	7849      	ldrb	r1, [r1, #1]
 80014aa:	fb01 f303 	mul.w	r3, r1, r3
 80014ae:	4619      	mov	r1, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	440b      	add	r3, r1
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	e030      	b.n	8001524 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d010      	beq.n	80014f4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80014d2:	4b23      	ldr	r3, [pc, #140]	; (8001560 <SSD1306_Putc+0xfc>)
 80014d4:	881a      	ldrh	r2, [r3, #0]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4413      	add	r3, r2
 80014dc:	b298      	uxth	r0, r3
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <SSD1306_Putc+0xfc>)
 80014e0:	885a      	ldrh	r2, [r3, #2]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4413      	add	r3, r2
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	79ba      	ldrb	r2, [r7, #6]
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff ff43 	bl	8001378 <SSD1306_DrawPixel>
 80014f2:	e014      	b.n	800151e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <SSD1306_Putc+0xfc>)
 80014f6:	881a      	ldrh	r2, [r3, #0]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	b298      	uxth	r0, r3
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <SSD1306_Putc+0xfc>)
 8001502:	885a      	ldrh	r2, [r3, #2]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	b29b      	uxth	r3, r3
 8001508:	4413      	add	r3, r2
 800150a:	b299      	uxth	r1, r3
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	2b00      	cmp	r3, #0
 8001510:	bf0c      	ite	eq
 8001512:	2301      	moveq	r3, #1
 8001514:	2300      	movne	r3, #0
 8001516:	b2db      	uxtb	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	f7ff ff2d 	bl	8001378 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	3301      	adds	r3, #1
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4293      	cmp	r3, r2
 800152e:	d3c8      	bcc.n	80014c2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3301      	adds	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	785b      	ldrb	r3, [r3, #1]
 800153a:	461a      	mov	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	4293      	cmp	r3, r2
 8001540:	d3ad      	bcc.n	800149e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <SSD1306_Putc+0xfc>)
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b29a      	uxth	r2, r3
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <SSD1306_Putc+0xfc>)
 8001552:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001554:	79fb      	ldrb	r3, [r7, #7]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000564 	.word	0x20000564

08001564 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	4613      	mov	r3, r2
 8001570:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001572:	e012      	b.n	800159a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	79fa      	ldrb	r2, [r7, #7]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff71 	bl	8001464 <SSD1306_Putc>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d002      	beq.n	8001594 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	e008      	b.n	80015a6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	3301      	adds	r3, #1
 8001598:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1e8      	bne.n	8001574 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	781b      	ldrb	r3, [r3, #0]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <ssd1306_I2C_Init+0x28>)
 80015b8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015ba:	e002      	b.n	80015c2 <ssd1306_I2C_Init+0x12>
		p--;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f9      	bne.n	80015bc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	0003d090 	.word	0x0003d090

080015dc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b0c7      	sub	sp, #284	; 0x11c
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	4604      	mov	r4, r0
 80015e4:	4608      	mov	r0, r1
 80015e6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80015ea:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80015ee:	600a      	str	r2, [r1, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015f6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80015fa:	4622      	mov	r2, r4
 80015fc:	701a      	strb	r2, [r3, #0]
 80015fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001602:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001606:	4602      	mov	r2, r0
 8001608:	701a      	strb	r2, [r3, #0]
 800160a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800160e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001612:	460a      	mov	r2, r1
 8001614:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001616:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800161a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800161e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001622:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001626:	7812      	ldrb	r2, [r2, #0]
 8001628:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800162a:	2300      	movs	r3, #0
 800162c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001630:	e015      	b.n	800165e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001632:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001636:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800163a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	441a      	add	r2, r3
 8001642:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001646:	3301      	adds	r3, #1
 8001648:	7811      	ldrb	r1, [r2, #0]
 800164a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800164e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001652:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001654:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001658:	3301      	adds	r3, #1
 800165a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800165e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001662:	b29b      	uxth	r3, r3
 8001664:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001668:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800166c:	8812      	ldrh	r2, [r2, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d8df      	bhi.n	8001632 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001672:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001676:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	b299      	uxth	r1, r3
 800167e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001682:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	3301      	adds	r3, #1
 800168a:	b29b      	uxth	r3, r3
 800168c:	f107 020c 	add.w	r2, r7, #12
 8001690:	200a      	movs	r0, #10
 8001692:	9000      	str	r0, [sp, #0]
 8001694:	4803      	ldr	r0, [pc, #12]	; (80016a4 <ssd1306_I2C_WriteMulti+0xc8>)
 8001696:	f000 fd23 	bl	80020e0 <HAL_I2C_Master_Transmit>
}
 800169a:	bf00      	nop
 800169c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd90      	pop	{r4, r7, pc}
 80016a4:	20000094 	.word	0x20000094

080016a8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
 80016b2:	460b      	mov	r3, r1
 80016b4:	71bb      	strb	r3, [r7, #6]
 80016b6:	4613      	mov	r3, r2
 80016b8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80016ba:	79bb      	ldrb	r3, [r7, #6]
 80016bc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80016be:	797b      	ldrb	r3, [r7, #5]
 80016c0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	b299      	uxth	r1, r3
 80016c6:	f107 020c 	add.w	r2, r7, #12
 80016ca:	230a      	movs	r3, #10
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2302      	movs	r3, #2
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <ssd1306_I2C_Write+0x38>)
 80016d2:	f000 fd05 	bl	80020e0 <HAL_I2C_Master_Transmit>
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000094 	.word	0x20000094

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_MspInit+0x44>)
 80016ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_MspInit+0x44>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6613      	str	r3, [r2, #96]	; 0x60
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_MspInit+0x44>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_MspInit+0x44>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_MspInit+0x44>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	6593      	str	r3, [r2, #88]	; 0x58
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_MspInit+0x44>)
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b0a0      	sub	sp, #128	; 0x80
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001744:	f107 0318 	add.w	r3, r7, #24
 8001748:	2254      	movs	r2, #84	; 0x54
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f002 fda1 	bl	8004294 <memset>
  if(hi2c->Instance==I2C1)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a2d      	ldr	r2, [pc, #180]	; (800180c <HAL_I2C_MspInit+0xe0>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d153      	bne.n	8001804 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800175c:	2340      	movs	r3, #64	; 0x40
 800175e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001760:	2300      	movs	r3, #0
 8001762:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001764:	f107 0318 	add.w	r3, r7, #24
 8001768:	4618      	mov	r0, r3
 800176a:	f001 ffaf 	bl	80036cc <HAL_RCCEx_PeriphCLKConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001774:	f7ff fcf0 	bl	8001158 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 800177a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177c:	4a24      	ldr	r2, [pc, #144]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 8001792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001794:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 8001796:	f043 0302 	orr.w	r3, r3, #2
 800179a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ae:	2312      	movs	r3, #18
 80017b0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ba:	2304      	movs	r3, #4
 80017bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017c2:	4619      	mov	r1, r3
 80017c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c8:	f000 fa60 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d0:	2312      	movs	r3, #18
 80017d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017dc:	2304      	movs	r3, #4
 80017de:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017e4:	4619      	mov	r1, r3
 80017e6:	480b      	ldr	r0, [pc, #44]	; (8001814 <HAL_I2C_MspInit+0xe8>)
 80017e8:	f000 fa50 	bl	8001c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	4a07      	ldr	r2, [pc, #28]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 80017f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017f6:	6593      	str	r3, [r2, #88]	; 0x58
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001804:	bf00      	nop
 8001806:	3780      	adds	r7, #128	; 0x80
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40005400 	.word	0x40005400
 8001810:	40021000 	.word	0x40021000
 8001814:	48000400 	.word	0x48000400

08001818 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <HAL_TIM_Base_MspInit+0x38>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d10b      	bne.n	8001842 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_TIM_Base_MspInit+0x3c>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	4a09      	ldr	r2, [pc, #36]	; (8001854 <HAL_TIM_Base_MspInit+0x3c>)
 8001830:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001834:	6613      	str	r3, [r2, #96]	; 0x60
 8001836:	4b07      	ldr	r3, [pc, #28]	; (8001854 <HAL_TIM_Base_MspInit+0x3c>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40012c00 	.word	0x40012c00
 8001854:	40021000 	.word	0x40021000

08001858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800185c:	e7fe      	b.n	800185c <NMI_Handler+0x4>

0800185e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <HardFault_Handler+0x4>

08001864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <MemManage_Handler+0x4>

0800186a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <BusFault_Handler+0x4>

08001870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <UsageFault_Handler+0x4>

08001876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a4:	f000 f8c8 	bl	8001a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <_sbrk+0x5c>)
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <_sbrk+0x60>)
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <_sbrk+0x64>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <_sbrk+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d207      	bcs.n	80018ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018dc:	f002 fcb0 	bl	8004240 <__errno>
 80018e0:	4603      	mov	r3, r0
 80018e2:	220c      	movs	r2, #12
 80018e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e009      	b.n	8001900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <_sbrk+0x64>)
 80018fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20010000 	.word	0x20010000
 800190c:	00000400 	.word	0x00000400
 8001910:	2000056c 	.word	0x2000056c
 8001914:	20000588 	.word	0x20000588

08001918 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <SystemInit+0x20>)
 800191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <SystemInit+0x20>)
 8001924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800193c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001974 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001940:	f7ff ffea 	bl	8001918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <LoopForever+0x6>)
  ldr r1, =_edata
 8001946:	490d      	ldr	r1, [pc, #52]	; (800197c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001948:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <LoopForever+0xe>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <LoopForever+0x12>)
  ldr r4, =_ebss
 800195c:	4c0a      	ldr	r4, [pc, #40]	; (8001988 <LoopForever+0x16>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196a:	f002 fc6f 	bl	800424c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800196e:	f7ff f9af 	bl	8000cd0 <main>

08001972 <LoopForever>:

LoopForever:
    b LoopForever
 8001972:	e7fe      	b.n	8001972 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001974:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001980:	08005994 	.word	0x08005994
  ldr r2, =_sbss
 8001984:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001988:	20000584 	.word	0x20000584

0800198c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC1_IRQHandler>

0800198e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001998:	2003      	movs	r0, #3
 800199a:	f000 f943 	bl	8001c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800199e:	200f      	movs	r0, #15
 80019a0:	f000 f80e 	bl	80019c0 <HAL_InitTick>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	71fb      	strb	r3, [r7, #7]
 80019ae:	e001      	b.n	80019b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019b0:	f7ff fe98 	bl	80016e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019b4:	79fb      	ldrb	r3, [r7, #7]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <HAL_InitTick+0x6c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d023      	beq.n	8001a1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_InitTick+0x70>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <HAL_InitTick+0x6c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f941 	bl	8001c72 <HAL_SYSTICK_Config>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10f      	bne.n	8001a16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d809      	bhi.n	8001a10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fc:	2200      	movs	r2, #0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f000 f919 	bl	8001c3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a08:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <HAL_InitTick+0x74>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e007      	b.n	8001a20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
 8001a14:	e004      	b.n	8001a20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	73fb      	strb	r3, [r7, #15]
 8001a1a:	e001      	b.n	8001a20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000010 	.word	0x20000010
 8001a30:	20000008 	.word	0x20000008
 8001a34:	2000000c 	.word	0x2000000c

08001a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x20>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_IncTick+0x24>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_IncTick+0x24>)
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000010 	.word	0x20000010
 8001a5c:	20000570 	.word	0x20000570

08001a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <HAL_GetTick+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000570 	.word	0x20000570

08001a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff ffee 	bl	8001a60 <HAL_GetTick>
 8001a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d005      	beq.n	8001a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_Delay+0x44>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a9e:	bf00      	nop
 8001aa0:	f7ff ffde 	bl	8001a60 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d8f7      	bhi.n	8001aa0 <HAL_Delay+0x28>
  {
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000010 	.word	0x20000010

08001ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	db0a      	blt.n	8001b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	490c      	ldr	r1, [pc, #48]	; (8001b70 <__NVIC_SetPriority+0x4c>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	0112      	lsls	r2, r2, #4
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	440b      	add	r3, r1
 8001b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b4c:	e00a      	b.n	8001b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4908      	ldr	r1, [pc, #32]	; (8001b74 <__NVIC_SetPriority+0x50>)
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	3b04      	subs	r3, #4
 8001b5c:	0112      	lsls	r2, r2, #4
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	440b      	add	r3, r1
 8001b62:	761a      	strb	r2, [r3, #24]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000e100 	.word	0xe000e100
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f1c3 0307 	rsb	r3, r3, #7
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	bf28      	it	cs
 8001b96:	2304      	movcs	r3, #4
 8001b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d902      	bls.n	8001ba8 <NVIC_EncodePriority+0x30>
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3b03      	subs	r3, #3
 8001ba6:	e000      	b.n	8001baa <NVIC_EncodePriority+0x32>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	401a      	ands	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	43d9      	mvns	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	4313      	orrs	r3, r2
         );
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3724      	adds	r7, #36	; 0x24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf0:	d301      	bcc.n	8001bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00f      	b.n	8001c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <SysTick_Config+0x40>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfe:	210f      	movs	r1, #15
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f7ff ff8e 	bl	8001b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <SysTick_Config+0x40>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <SysTick_Config+0x40>)
 8001c10:	2207      	movs	r2, #7
 8001c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	e000e010 	.word	0xe000e010

08001c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ff47 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c4c:	f7ff ff5c 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	6978      	ldr	r0, [r7, #20]
 8001c58:	f7ff ff8e 	bl	8001b78 <NVIC_EncodePriority>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff5d 	bl	8001b24 <__NVIC_SetPriority>
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffb0 	bl	8001be0 <SysTick_Config>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9a:	e148      	b.n	8001f2e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 813a 	beq.w	8001f28 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d005      	beq.n	8001ccc <HAL_GPIO_Init+0x40>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d130      	bne.n	8001d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d02:	2201      	movs	r2, #1
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	091b      	lsrs	r3, r3, #4
 8001d18:	f003 0201 	and.w	r2, r3, #1
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d017      	beq.n	8001d6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2203      	movs	r2, #3
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d123      	bne.n	8001dbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	08da      	lsrs	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3208      	adds	r2, #8
 8001d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	08da      	lsrs	r2, r3, #3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3208      	adds	r2, #8
 8001db8:	6939      	ldr	r1, [r7, #16]
 8001dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	2203      	movs	r2, #3
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0203 	and.w	r2, r3, #3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8094 	beq.w	8001f28 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e00:	4b52      	ldr	r3, [pc, #328]	; (8001f4c <HAL_GPIO_Init+0x2c0>)
 8001e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e04:	4a51      	ldr	r2, [pc, #324]	; (8001f4c <HAL_GPIO_Init+0x2c0>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e0c:	4b4f      	ldr	r3, [pc, #316]	; (8001f4c <HAL_GPIO_Init+0x2c0>)
 8001e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e18:	4a4d      	ldr	r2, [pc, #308]	; (8001f50 <HAL_GPIO_Init+0x2c4>)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	3302      	adds	r3, #2
 8001e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e42:	d00d      	beq.n	8001e60 <HAL_GPIO_Init+0x1d4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a43      	ldr	r2, [pc, #268]	; (8001f54 <HAL_GPIO_Init+0x2c8>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d007      	beq.n	8001e5c <HAL_GPIO_Init+0x1d0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a42      	ldr	r2, [pc, #264]	; (8001f58 <HAL_GPIO_Init+0x2cc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d101      	bne.n	8001e58 <HAL_GPIO_Init+0x1cc>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e004      	b.n	8001e62 <HAL_GPIO_Init+0x1d6>
 8001e58:	2307      	movs	r3, #7
 8001e5a:	e002      	b.n	8001e62 <HAL_GPIO_Init+0x1d6>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <HAL_GPIO_Init+0x1d6>
 8001e60:	2300      	movs	r3, #0
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	f002 0203 	and.w	r2, r2, #3
 8001e68:	0092      	lsls	r2, r2, #2
 8001e6a:	4093      	lsls	r3, r2
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e72:	4937      	ldr	r1, [pc, #220]	; (8001f50 <HAL_GPIO_Init+0x2c4>)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	3302      	adds	r3, #2
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e80:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ea4:	4a2d      	ldr	r2, [pc, #180]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ece:	4a23      	ldr	r2, [pc, #140]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ed4:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ef8:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f22:	4a0e      	ldr	r2, [pc, #56]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f47f aeaf 	bne.w	8001c9c <HAL_GPIO_Init+0x10>
  }
}
 8001f3e:	bf00      	nop
 8001f40:	bf00      	nop
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40010000 	.word	0x40010000
 8001f54:	48000400 	.word	0x48000400
 8001f58:	48000800 	.word	0x48000800
 8001f5c:	40010400 	.word	0x40010400

08001f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	e001      	b.n	8001f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fac:	e002      	b.n	8001fb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e081      	b.n	80020d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fba0 	bl	800172c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2224      	movs	r2, #36	; 0x24
 8001ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0201 	bic.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002010:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002020:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d107      	bne.n	800203a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	e006      	b.n	8002048 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002046:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d104      	bne.n	800205a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002058:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800207c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691a      	ldr	r2, [r3, #16]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69d9      	ldr	r1, [r3, #28]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1a      	ldr	r2, [r3, #32]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	461a      	mov	r2, r3
 80020ec:	460b      	mov	r3, r1
 80020ee:	817b      	strh	r3, [r7, #10]
 80020f0:	4613      	mov	r3, r2
 80020f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	f040 80da 	bne.w	80022b6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_I2C_Master_Transmit+0x30>
 800210c:	2302      	movs	r3, #2
 800210e:	e0d3      	b.n	80022b8 <HAL_I2C_Master_Transmit+0x1d8>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002118:	f7ff fca2 	bl	8001a60 <HAL_GetTick>
 800211c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2319      	movs	r3, #25
 8002124:	2201      	movs	r2, #1
 8002126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f9f7 	bl	800251e <I2C_WaitOnFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e0be      	b.n	80022b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2221      	movs	r2, #33	; 0x21
 800213e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2210      	movs	r2, #16
 8002146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	893a      	ldrh	r2, [r7, #8]
 800215a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002166:	b29b      	uxth	r3, r3
 8002168:	2bff      	cmp	r3, #255	; 0xff
 800216a:	d90e      	bls.n	800218a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	22ff      	movs	r2, #255	; 0xff
 8002170:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002176:	b2da      	uxtb	r2, r3
 8002178:	8979      	ldrh	r1, [r7, #10]
 800217a:	4b51      	ldr	r3, [pc, #324]	; (80022c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 fb74 	bl	8002870 <I2C_TransferConfig>
 8002188:	e06c      	b.n	8002264 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002198:	b2da      	uxtb	r2, r3
 800219a:	8979      	ldrh	r1, [r7, #10]
 800219c:	4b48      	ldr	r3, [pc, #288]	; (80022c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 fb63 	bl	8002870 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80021aa:	e05b      	b.n	8002264 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	6a39      	ldr	r1, [r7, #32]
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f9f4 	bl	800259e <I2C_WaitOnTXISFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e07b      	b.n	80022b8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	781a      	ldrb	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d034      	beq.n	8002264 <HAL_I2C_Master_Transmit+0x184>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d130      	bne.n	8002264 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	2200      	movs	r2, #0
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f986 	bl	800251e <I2C_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e04d      	b.n	80022b8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002220:	b29b      	uxth	r3, r3
 8002222:	2bff      	cmp	r3, #255	; 0xff
 8002224:	d90e      	bls.n	8002244 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	22ff      	movs	r2, #255	; 0xff
 800222a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002230:	b2da      	uxtb	r2, r3
 8002232:	8979      	ldrh	r1, [r7, #10]
 8002234:	2300      	movs	r3, #0
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fb17 	bl	8002870 <I2C_TransferConfig>
 8002242:	e00f      	b.n	8002264 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002252:	b2da      	uxtb	r2, r3
 8002254:	8979      	ldrh	r1, [r7, #10]
 8002256:	2300      	movs	r3, #0
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fb06 	bl	8002870 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d19e      	bne.n	80021ac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	6a39      	ldr	r1, [r7, #32]
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f9d3 	bl	800261e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e01a      	b.n	80022b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2220      	movs	r2, #32
 8002288:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002296:	400b      	ands	r3, r1
 8002298:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80022b6:	2302      	movs	r3, #2
  }
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	80002000 	.word	0x80002000
 80022c4:	fe00e800 	.word	0xfe00e800

080022c8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	460b      	mov	r3, r1
 80022d6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	f040 80f1 	bne.w	80024cc <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022f8:	d101      	bne.n	80022fe <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80022fa:	2302      	movs	r3, #2
 80022fc:	e0e7      	b.n	80024ce <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_I2C_IsDeviceReady+0x44>
 8002308:	2302      	movs	r3, #2
 800230a:	e0e0      	b.n	80024ce <HAL_I2C_IsDeviceReady+0x206>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2224      	movs	r2, #36	; 0x24
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d107      	bne.n	800233a <HAL_I2C_IsDeviceReady+0x72>
 800232a:	897b      	ldrh	r3, [r7, #10]
 800232c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002330:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002334:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002338:	e004      	b.n	8002344 <HAL_I2C_IsDeviceReady+0x7c>
 800233a:	897b      	ldrh	r3, [r7, #10]
 800233c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002340:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800234a:	f7ff fb89 	bl	8001a60 <HAL_GetTick>
 800234e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b20      	cmp	r3, #32
 800235c:	bf0c      	ite	eq
 800235e:	2301      	moveq	r3, #1
 8002360:	2300      	movne	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	2b10      	cmp	r3, #16
 8002372:	bf0c      	ite	eq
 8002374:	2301      	moveq	r3, #1
 8002376:	2300      	movne	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800237c:	e034      	b.n	80023e8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d01a      	beq.n	80023bc <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002386:	f7ff fb6b 	bl	8001a60 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d302      	bcc.n	800239c <HAL_I2C_IsDeviceReady+0xd4>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10f      	bne.n	80023bc <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a8:	f043 0220 	orr.w	r2, r3, #32
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e088      	b.n	80024ce <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b20      	cmp	r3, #32
 80023c8:	bf0c      	ite	eq
 80023ca:	2301      	moveq	r3, #1
 80023cc:	2300      	movne	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	2b10      	cmp	r3, #16
 80023de:	bf0c      	ite	eq
 80023e0:	2301      	moveq	r3, #1
 80023e2:	2300      	movne	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80023e8:	7ffb      	ldrb	r3, [r7, #31]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d102      	bne.n	80023f4 <HAL_I2C_IsDeviceReady+0x12c>
 80023ee:	7fbb      	ldrb	r3, [r7, #30]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0c4      	beq.n	800237e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d01a      	beq.n	8002438 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2200      	movs	r2, #0
 800240a:	2120      	movs	r1, #32
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f886 	bl	800251e <I2C_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e058      	b.n	80024ce <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2220      	movs	r2, #32
 8002422:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	e04a      	b.n	80024ce <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2200      	movs	r2, #0
 8002440:	2120      	movs	r1, #32
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f86b 	bl	800251e <I2C_WaitOnFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e03d      	b.n	80024ce <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2210      	movs	r2, #16
 8002458:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2220      	movs	r2, #32
 8002460:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	429a      	cmp	r2, r3
 8002468:	d118      	bne.n	800249c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002478:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2200      	movs	r2, #0
 8002482:	2120      	movs	r1, #32
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f84a 	bl	800251e <I2C_WaitOnFlagUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e01c      	b.n	80024ce <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2220      	movs	r2, #32
 800249a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	3301      	adds	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	f63f af3b 	bhi.w	8002322 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	f043 0220 	orr.w	r2, r3, #32
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80024cc:	2302      	movs	r3, #2
  }
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3720      	adds	r7, #32
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d103      	bne.n	80024f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2200      	movs	r2, #0
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d007      	beq.n	8002512 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699a      	ldr	r2, [r3, #24]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	619a      	str	r2, [r3, #24]
  }
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	4613      	mov	r3, r2
 800252c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800252e:	e022      	b.n	8002576 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d01e      	beq.n	8002576 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002538:	f7ff fa92 	bl	8001a60 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d302      	bcc.n	800254e <I2C_WaitOnFlagUntilTimeout+0x30>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d113      	bne.n	8002576 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	f043 0220 	orr.w	r2, r3, #32
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e00f      	b.n	8002596 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	699a      	ldr	r2, [r3, #24]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4013      	ands	r3, r2
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	429a      	cmp	r2, r3
 8002584:	bf0c      	ite	eq
 8002586:	2301      	moveq	r3, #1
 8002588:	2300      	movne	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	429a      	cmp	r2, r3
 8002592:	d0cd      	beq.n	8002530 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025aa:	e02c      	b.n	8002606 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	68b9      	ldr	r1, [r7, #8]
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f871 	bl	8002698 <I2C_IsErrorOccurred>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e02a      	b.n	8002616 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c6:	d01e      	beq.n	8002606 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c8:	f7ff fa4a 	bl	8001a60 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d302      	bcc.n	80025de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d113      	bne.n	8002606 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f043 0220 	orr.w	r2, r3, #32
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e007      	b.n	8002616 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b02      	cmp	r3, #2
 8002612:	d1cb      	bne.n	80025ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800262a:	e028      	b.n	800267e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f831 	bl	8002698 <I2C_IsErrorOccurred>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e026      	b.n	800268e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002640:	f7ff fa0e 	bl	8001a60 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	429a      	cmp	r2, r3
 800264e:	d302      	bcc.n	8002656 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d113      	bne.n	800267e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f043 0220 	orr.w	r2, r3, #32
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e007      	b.n	800268e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b20      	cmp	r3, #32
 800268a:	d1cf      	bne.n	800262c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d075      	beq.n	80027b0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2210      	movs	r2, #16
 80026ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026cc:	e056      	b.n	800277c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d052      	beq.n	800277c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026d6:	f7ff f9c3 	bl	8001a60 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d302      	bcc.n	80026ec <I2C_IsErrorOccurred+0x54>
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d147      	bne.n	800277c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800270a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800270e:	d12e      	bne.n	800276e <I2C_IsErrorOccurred+0xd6>
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002716:	d02a      	beq.n	800276e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	2b20      	cmp	r3, #32
 800271c:	d027      	beq.n	800276e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800272c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800272e:	f7ff f997 	bl	8001a60 <HAL_GetTick>
 8002732:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002734:	e01b      	b.n	800276e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002736:	f7ff f993 	bl	8001a60 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b19      	cmp	r3, #25
 8002742:	d914      	bls.n	800276e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	f043 0220 	orr.w	r2, r3, #32
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	2b20      	cmp	r3, #32
 800277a:	d1dc      	bne.n	8002736 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b20      	cmp	r3, #32
 8002788:	d003      	beq.n	8002792 <I2C_IsErrorOccurred+0xfa>
 800278a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800278e:	2b00      	cmp	r3, #0
 8002790:	d09d      	beq.n	80026ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002796:	2b00      	cmp	r3, #0
 8002798:	d103      	bne.n	80027a2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2220      	movs	r2, #32
 80027a0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00b      	beq.n	80027fc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	f043 0308 	orr.w	r3, r3, #8
 80027ea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00b      	beq.n	800281e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002816:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800281e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002822:	2b00      	cmp	r3, #0
 8002824:	d01c      	beq.n	8002860 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f7ff fe55 	bl	80024d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6859      	ldr	r1, [r3, #4]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <I2C_IsErrorOccurred+0x1d4>)
 8002838:	400b      	ands	r3, r1
 800283a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	431a      	orrs	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002864:	4618      	mov	r0, r3
 8002866:	3728      	adds	r7, #40	; 0x28
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	fe00e800 	.word	0xfe00e800

08002870 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	460b      	mov	r3, r1
 800287c:	817b      	strh	r3, [r7, #10]
 800287e:	4613      	mov	r3, r2
 8002880:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002882:	897b      	ldrh	r3, [r7, #10]
 8002884:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002888:	7a7b      	ldrb	r3, [r7, #9]
 800288a:	041b      	lsls	r3, r3, #16
 800288c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002890:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	4313      	orrs	r3, r2
 800289a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800289e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	0d5b      	lsrs	r3, r3, #21
 80028aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <I2C_TransferConfig+0x60>)
 80028b0:	430b      	orrs	r3, r1
 80028b2:	43db      	mvns	r3, r3
 80028b4:	ea02 0103 	and.w	r1, r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	03ff63ff 	.word	0x03ff63ff

080028d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	d138      	bne.n	800295c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e032      	b.n	800295e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2224      	movs	r2, #36	; 0x24
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002926:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6819      	ldr	r1, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	e000      	b.n	800295e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800295c:	2302      	movs	r3, #2
  }
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800296a:	b480      	push	{r7}
 800296c:	b085      	sub	sp, #20
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b20      	cmp	r3, #32
 800297e:	d139      	bne.n	80029f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800298a:	2302      	movs	r3, #2
 800298c:	e033      	b.n	80029f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2224      	movs	r2, #36	; 0x24
 800299a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0201 	bic.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e000      	b.n	80029f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <HAL_PWREx_GetVoltageRange+0x18>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40007000 	.word	0x40007000

08002a20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a2e:	d130      	bne.n	8002a92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a30:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a3c:	d038      	beq.n	8002ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a3e:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a46:	4a1e      	ldr	r2, [pc, #120]	; (8002ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2232      	movs	r2, #50	; 0x32
 8002a54:	fb02 f303 	mul.w	r3, r2, r3
 8002a58:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	0c9b      	lsrs	r3, r3, #18
 8002a60:	3301      	adds	r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a64:	e002      	b.n	8002a6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a6c:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a78:	d102      	bne.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f2      	bne.n	8002a66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8c:	d110      	bne.n	8002ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e00f      	b.n	8002ab2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a92:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9e:	d007      	beq.n	8002ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002aa8:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40007000 	.word	0x40007000
 8002ac4:	20000008 	.word	0x20000008
 8002ac8:	431bde83 	.word	0x431bde83

08002acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d102      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f000 bc02 	b.w	80032e4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae0:	4b96      	ldr	r3, [pc, #600]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 030c 	and.w	r3, r3, #12
 8002ae8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aea:	4b94      	ldr	r3, [pc, #592]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80e4 	beq.w	8002cca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <HAL_RCC_OscConfig+0x4c>
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b0c      	cmp	r3, #12
 8002b0c:	f040 808b 	bne.w	8002c26 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	f040 8087 	bne.w	8002c26 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b18:	4b88      	ldr	r3, [pc, #544]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_OscConfig+0x64>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e3d9      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1a      	ldr	r2, [r3, #32]
 8002b34:	4b81      	ldr	r3, [pc, #516]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d004      	beq.n	8002b4a <HAL_RCC_OscConfig+0x7e>
 8002b40:	4b7e      	ldr	r3, [pc, #504]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b48:	e005      	b.n	8002b56 <HAL_RCC_OscConfig+0x8a>
 8002b4a:	4b7c      	ldr	r3, [pc, #496]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d223      	bcs.n	8002ba2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 fd54 	bl	800360c <RCC_SetFlashLatencyFromMSIRange>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e3ba      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b6e:	4b73      	ldr	r3, [pc, #460]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a72      	ldr	r2, [pc, #456]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b74:	f043 0308 	orr.w	r3, r3, #8
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	4b70      	ldr	r3, [pc, #448]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	496d      	ldr	r1, [pc, #436]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b8c:	4b6b      	ldr	r3, [pc, #428]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	4968      	ldr	r1, [pc, #416]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
 8002ba0:	e025      	b.n	8002bee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba2:	4b66      	ldr	r3, [pc, #408]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a65      	ldr	r2, [pc, #404]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002ba8:	f043 0308 	orr.w	r3, r3, #8
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	4b63      	ldr	r3, [pc, #396]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4960      	ldr	r1, [pc, #384]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc0:	4b5e      	ldr	r3, [pc, #376]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	495b      	ldr	r1, [pc, #364]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fd14 	bl	800360c <RCC_SetFlashLatencyFromMSIRange>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e37a      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bee:	f000 fc81 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	4b51      	ldr	r3, [pc, #324]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	4950      	ldr	r1, [pc, #320]	; (8002d40 <HAL_RCC_OscConfig+0x274>)
 8002c00:	5ccb      	ldrb	r3, [r1, r3]
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0a:	4a4e      	ldr	r2, [pc, #312]	; (8002d44 <HAL_RCC_OscConfig+0x278>)
 8002c0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c0e:	4b4e      	ldr	r3, [pc, #312]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe fed4 	bl	80019c0 <HAL_InitTick>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d052      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	e35e      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d032      	beq.n	8002c94 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c2e:	4b43      	ldr	r3, [pc, #268]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a42      	ldr	r2, [pc, #264]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c3a:	f7fe ff11 	bl	8001a60 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c42:	f7fe ff0d 	bl	8001a60 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e347      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c54:	4b39      	ldr	r3, [pc, #228]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c60:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a35      	ldr	r2, [pc, #212]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c66:	f043 0308 	orr.w	r3, r3, #8
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b33      	ldr	r3, [pc, #204]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4930      	ldr	r1, [pc, #192]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c7e:	4b2f      	ldr	r3, [pc, #188]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	492b      	ldr	r1, [pc, #172]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	604b      	str	r3, [r1, #4]
 8002c92:	e01a      	b.n	8002cca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c94:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a28      	ldr	r2, [pc, #160]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c9a:	f023 0301 	bic.w	r3, r3, #1
 8002c9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fede 	bl	8001a60 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ca8:	f7fe feda 	bl	8001a60 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e314      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cba:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x1dc>
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d073      	beq.n	8002dbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x21c>
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d10e      	bne.n	8002d00 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d10b      	bne.n	8002d00 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d063      	beq.n	8002dbc <HAL_RCC_OscConfig+0x2f0>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d15f      	bne.n	8002dbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e2f1      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d08:	d106      	bne.n	8002d18 <HAL_RCC_OscConfig+0x24c>
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e025      	b.n	8002d64 <HAL_RCC_OscConfig+0x298>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d20:	d114      	bne.n	8002d4c <HAL_RCC_OscConfig+0x280>
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a02      	ldr	r2, [pc, #8]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e013      	b.n	8002d64 <HAL_RCC_OscConfig+0x298>
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	08005918 	.word	0x08005918
 8002d44:	20000008 	.word	0x20000008
 8002d48:	2000000c 	.word	0x2000000c
 8002d4c:	4ba0      	ldr	r3, [pc, #640]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a9f      	ldr	r2, [pc, #636]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b9d      	ldr	r3, [pc, #628]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a9c      	ldr	r2, [pc, #624]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d013      	beq.n	8002d94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fe78 	bl	8001a60 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe fe74 	bl	8001a60 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	; 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e2ae      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d86:	4b92      	ldr	r3, [pc, #584]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x2a8>
 8002d92:	e014      	b.n	8002dbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe fe64 	bl	8001a60 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7fe fe60 	bl	8001a60 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e29a      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dae:	4b88      	ldr	r3, [pc, #544]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x2d0>
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d060      	beq.n	8002e8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_OscConfig+0x310>
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b0c      	cmp	r3, #12
 8002dd4:	d119      	bne.n	8002e0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d116      	bne.n	8002e0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ddc:	4b7c      	ldr	r3, [pc, #496]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_OscConfig+0x328>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e277      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df4:	4b76      	ldr	r3, [pc, #472]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	4973      	ldr	r1, [pc, #460]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e08:	e040      	b.n	8002e8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d023      	beq.n	8002e5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e12:	4b6f      	ldr	r3, [pc, #444]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a6e      	ldr	r2, [pc, #440]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fe fe1f 	bl	8001a60 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e26:	f7fe fe1b 	bl	8001a60 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e255      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e38:	4b65      	ldr	r3, [pc, #404]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b62      	ldr	r3, [pc, #392]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	495f      	ldr	r1, [pc, #380]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
 8002e58:	e018      	b.n	8002e8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5a:	4b5d      	ldr	r3, [pc, #372]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a5c      	ldr	r2, [pc, #368]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7fe fdfb 	bl	8001a60 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7fe fdf7 	bl	8001a60 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e231      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e80:	4b53      	ldr	r3, [pc, #332]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f0      	bne.n	8002e6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d03c      	beq.n	8002f12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01c      	beq.n	8002eda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea6:	4a4a      	ldr	r2, [pc, #296]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7fe fdd6 	bl	8001a60 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb8:	f7fe fdd2 	bl	8001a60 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e20c      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eca:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ef      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x3ec>
 8002ed8:	e01b      	b.n	8002f12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eda:	4b3d      	ldr	r3, [pc, #244]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee0:	4a3b      	ldr	r2, [pc, #236]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eea:	f7fe fdb9 	bl	8001a60 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef2:	f7fe fdb5 	bl	8001a60 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e1ef      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f04:	4b32      	ldr	r3, [pc, #200]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1ef      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 80a6 	beq.w	800306c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f20:	2300      	movs	r3, #0
 8002f22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f24:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10d      	bne.n	8002f4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f30:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f3c:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f4c:	4b21      	ldr	r3, [pc, #132]	; (8002fd4 <HAL_RCC_OscConfig+0x508>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d118      	bne.n	8002f8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f58:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <HAL_RCC_OscConfig+0x508>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1d      	ldr	r2, [pc, #116]	; (8002fd4 <HAL_RCC_OscConfig+0x508>)
 8002f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f64:	f7fe fd7c 	bl	8001a60 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6c:	f7fe fd78 	bl	8001a60 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1b2      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f7e:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <HAL_RCC_OscConfig+0x508>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d108      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x4d8>
 8002f92:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f98:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fa2:	e029      	b.n	8002ff8 <HAL_RCC_OscConfig+0x52c>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b05      	cmp	r3, #5
 8002faa:	d115      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x50c>
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	4a03      	ldr	r2, [pc, #12]	; (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fcc:	e014      	b.n	8002ff8 <HAL_RCC_OscConfig+0x52c>
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40007000 	.word	0x40007000
 8002fd8:	4b9a      	ldr	r3, [pc, #616]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	4a99      	ldr	r2, [pc, #612]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fe8:	4b96      	ldr	r3, [pc, #600]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fee:	4a95      	ldr	r2, [pc, #596]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 8002ff0:	f023 0304 	bic.w	r3, r3, #4
 8002ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d016      	beq.n	800302e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003000:	f7fe fd2e 	bl	8001a60 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003006:	e00a      	b.n	800301e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fe fd2a 	bl	8001a60 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e162      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800301e:	4b89      	ldr	r3, [pc, #548]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ed      	beq.n	8003008 <HAL_RCC_OscConfig+0x53c>
 800302c:	e015      	b.n	800305a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302e:	f7fe fd17 	bl	8001a60 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003034:	e00a      	b.n	800304c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003036:	f7fe fd13 	bl	8001a60 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f241 3288 	movw	r2, #5000	; 0x1388
 8003044:	4293      	cmp	r3, r2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e14b      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800304c:	4b7d      	ldr	r3, [pc, #500]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1ed      	bne.n	8003036 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800305a:	7ffb      	ldrb	r3, [r7, #31]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d105      	bne.n	800306c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003060:	4b78      	ldr	r3, [pc, #480]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 8003062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003064:	4a77      	ldr	r2, [pc, #476]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 8003066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b00      	cmp	r3, #0
 8003076:	d03c      	beq.n	80030f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01c      	beq.n	80030ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003080:	4b70      	ldr	r3, [pc, #448]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 8003082:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003086:	4a6f      	ldr	r2, [pc, #444]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7fe fce6 	bl	8001a60 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003098:	f7fe fce2 	bl	8001a60 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e11c      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030aa:	4b66      	ldr	r3, [pc, #408]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 80030ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0ef      	beq.n	8003098 <HAL_RCC_OscConfig+0x5cc>
 80030b8:	e01b      	b.n	80030f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030ba:	4b62      	ldr	r3, [pc, #392]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 80030bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030c0:	4a60      	ldr	r2, [pc, #384]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 80030c2:	f023 0301 	bic.w	r3, r3, #1
 80030c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ca:	f7fe fcc9 	bl	8001a60 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030d2:	f7fe fcc5 	bl	8001a60 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e0ff      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030e4:	4b57      	ldr	r3, [pc, #348]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 80030e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1ef      	bne.n	80030d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 80f3 	beq.w	80032e2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	2b02      	cmp	r3, #2
 8003102:	f040 80c9 	bne.w	8003298 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003106:	4b4f      	ldr	r3, [pc, #316]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f003 0203 	and.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	429a      	cmp	r2, r3
 8003118:	d12c      	bne.n	8003174 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	3b01      	subs	r3, #1
 8003126:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d123      	bne.n	8003174 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d11b      	bne.n	8003174 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003146:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d113      	bne.n	8003174 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	085b      	lsrs	r3, r3, #1
 8003158:	3b01      	subs	r3, #1
 800315a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800315c:	429a      	cmp	r2, r3
 800315e:	d109      	bne.n	8003174 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	3b01      	subs	r3, #1
 800316e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d06b      	beq.n	800324c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b0c      	cmp	r3, #12
 8003178:	d062      	beq.n	8003240 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800317a:	4b32      	ldr	r3, [pc, #200]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e0ac      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800318a:	4b2e      	ldr	r3, [pc, #184]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2d      	ldr	r2, [pc, #180]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 8003190:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003194:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003196:	f7fe fc63 	bl	8001a60 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319e:	f7fe fc5f 	bl	8001a60 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e099      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b0:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1f0      	bne.n	800319e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031bc:	4b21      	ldr	r3, [pc, #132]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	4b21      	ldr	r3, [pc, #132]	; (8003248 <HAL_RCC_OscConfig+0x77c>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031cc:	3a01      	subs	r2, #1
 80031ce:	0112      	lsls	r2, r2, #4
 80031d0:	4311      	orrs	r1, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031d6:	0212      	lsls	r2, r2, #8
 80031d8:	4311      	orrs	r1, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031de:	0852      	lsrs	r2, r2, #1
 80031e0:	3a01      	subs	r2, #1
 80031e2:	0552      	lsls	r2, r2, #21
 80031e4:	4311      	orrs	r1, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031ea:	0852      	lsrs	r2, r2, #1
 80031ec:	3a01      	subs	r2, #1
 80031ee:	0652      	lsls	r2, r2, #25
 80031f0:	4311      	orrs	r1, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031f6:	06d2      	lsls	r2, r2, #27
 80031f8:	430a      	orrs	r2, r1
 80031fa:	4912      	ldr	r1, [pc, #72]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003200:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 8003206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800320a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800320c:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 8003212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003216:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003218:	f7fe fc22 	bl	8001a60 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003220:	f7fe fc1e 	bl	8001a60 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e058      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003232:	4b04      	ldr	r3, [pc, #16]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800323e:	e050      	b.n	80032e2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e04f      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
 8003244:	40021000 	.word	0x40021000
 8003248:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324c:	4b27      	ldr	r3, [pc, #156]	; (80032ec <HAL_RCC_OscConfig+0x820>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d144      	bne.n	80032e2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003258:	4b24      	ldr	r3, [pc, #144]	; (80032ec <HAL_RCC_OscConfig+0x820>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a23      	ldr	r2, [pc, #140]	; (80032ec <HAL_RCC_OscConfig+0x820>)
 800325e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003262:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003264:	4b21      	ldr	r3, [pc, #132]	; (80032ec <HAL_RCC_OscConfig+0x820>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a20      	ldr	r2, [pc, #128]	; (80032ec <HAL_RCC_OscConfig+0x820>)
 800326a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800326e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003270:	f7fe fbf6 	bl	8001a60 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003278:	f7fe fbf2 	bl	8001a60 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e02c      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328a:	4b18      	ldr	r3, [pc, #96]	; (80032ec <HAL_RCC_OscConfig+0x820>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x7ac>
 8003296:	e024      	b.n	80032e2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2b0c      	cmp	r3, #12
 800329c:	d01f      	beq.n	80032de <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329e:	4b13      	ldr	r3, [pc, #76]	; (80032ec <HAL_RCC_OscConfig+0x820>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a12      	ldr	r2, [pc, #72]	; (80032ec <HAL_RCC_OscConfig+0x820>)
 80032a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7fe fbd9 	bl	8001a60 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b2:	f7fe fbd5 	bl	8001a60 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e00f      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_RCC_OscConfig+0x820>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_RCC_OscConfig+0x820>)
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	4905      	ldr	r1, [pc, #20]	; (80032ec <HAL_RCC_OscConfig+0x820>)
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_RCC_OscConfig+0x824>)
 80032d8:	4013      	ands	r3, r2
 80032da:	60cb      	str	r3, [r1, #12]
 80032dc:	e001      	b.n	80032e2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3720      	adds	r7, #32
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40021000 	.word	0x40021000
 80032f0:	feeefffc 	.word	0xfeeefffc

080032f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0e7      	b.n	80034d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003308:	4b75      	ldr	r3, [pc, #468]	; (80034e0 <HAL_RCC_ClockConfig+0x1ec>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d910      	bls.n	8003338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b72      	ldr	r3, [pc, #456]	; (80034e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 0207 	bic.w	r2, r3, #7
 800331e:	4970      	ldr	r1, [pc, #448]	; (80034e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b6e      	ldr	r3, [pc, #440]	; (80034e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0cf      	b.n	80034d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d010      	beq.n	8003366 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	4b66      	ldr	r3, [pc, #408]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003350:	429a      	cmp	r2, r3
 8003352:	d908      	bls.n	8003366 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003354:	4b63      	ldr	r3, [pc, #396]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	4960      	ldr	r1, [pc, #384]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d04c      	beq.n	800340c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b03      	cmp	r3, #3
 8003378:	d107      	bne.n	800338a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800337a:	4b5a      	ldr	r3, [pc, #360]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d121      	bne.n	80033ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e0a6      	b.n	80034d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003392:	4b54      	ldr	r3, [pc, #336]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d115      	bne.n	80033ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e09a      	b.n	80034d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033aa:	4b4e      	ldr	r3, [pc, #312]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e08e      	b.n	80034d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033ba:	4b4a      	ldr	r3, [pc, #296]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e086      	b.n	80034d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033ca:	4b46      	ldr	r3, [pc, #280]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f023 0203 	bic.w	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4943      	ldr	r1, [pc, #268]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033dc:	f7fe fb40 	bl	8001a60 <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7fe fb3c 	bl	8001a60 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e06e      	b.n	80034d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	4b3a      	ldr	r3, [pc, #232]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 020c 	and.w	r2, r3, #12
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	429a      	cmp	r2, r3
 800340a:	d1eb      	bne.n	80033e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d010      	beq.n	800343a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003424:	429a      	cmp	r2, r3
 8003426:	d208      	bcs.n	800343a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003428:	4b2e      	ldr	r3, [pc, #184]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	492b      	ldr	r1, [pc, #172]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800343a:	4b29      	ldr	r3, [pc, #164]	; (80034e0 <HAL_RCC_ClockConfig+0x1ec>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d210      	bcs.n	800346a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <HAL_RCC_ClockConfig+0x1ec>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f023 0207 	bic.w	r2, r3, #7
 8003450:	4923      	ldr	r1, [pc, #140]	; (80034e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	4313      	orrs	r3, r2
 8003456:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003458:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <HAL_RCC_ClockConfig+0x1ec>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d001      	beq.n	800346a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e036      	b.n	80034d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003476:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	4918      	ldr	r1, [pc, #96]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003484:	4313      	orrs	r3, r2
 8003486:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d009      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003494:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4910      	ldr	r1, [pc, #64]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034a8:	f000 f824 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 80034ac:	4602      	mov	r2, r0
 80034ae:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <HAL_RCC_ClockConfig+0x1f0>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	490b      	ldr	r1, [pc, #44]	; (80034e8 <HAL_RCC_ClockConfig+0x1f4>)
 80034ba:	5ccb      	ldrb	r3, [r1, r3]
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
 80034c4:	4a09      	ldr	r2, [pc, #36]	; (80034ec <HAL_RCC_ClockConfig+0x1f8>)
 80034c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_RCC_ClockConfig+0x1fc>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe fa77 	bl	80019c0 <HAL_InitTick>
 80034d2:	4603      	mov	r3, r0
 80034d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80034d6:	7afb      	ldrb	r3, [r7, #11]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40022000 	.word	0x40022000
 80034e4:	40021000 	.word	0x40021000
 80034e8:	08005918 	.word	0x08005918
 80034ec:	20000008 	.word	0x20000008
 80034f0:	2000000c 	.word	0x2000000c

080034f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003502:	4b3e      	ldr	r3, [pc, #248]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800350c:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0x34>
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2b0c      	cmp	r3, #12
 8003520:	d121      	bne.n	8003566 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d11e      	bne.n	8003566 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003528:	4b34      	ldr	r3, [pc, #208]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d107      	bne.n	8003544 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003534:	4b31      	ldr	r3, [pc, #196]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800353a:	0a1b      	lsrs	r3, r3, #8
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	e005      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003544:	4b2d      	ldr	r3, [pc, #180]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003550:	4a2b      	ldr	r2, [pc, #172]	; (8003600 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003558:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10d      	bne.n	800357c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003564:	e00a      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b04      	cmp	r3, #4
 800356a:	d102      	bne.n	8003572 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800356c:	4b25      	ldr	r3, [pc, #148]	; (8003604 <HAL_RCC_GetSysClockFreq+0x110>)
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	e004      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	2b08      	cmp	r3, #8
 8003576:	d101      	bne.n	800357c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003578:	4b23      	ldr	r3, [pc, #140]	; (8003608 <HAL_RCC_GetSysClockFreq+0x114>)
 800357a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d134      	bne.n	80035ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003582:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d003      	beq.n	800359a <HAL_RCC_GetSysClockFreq+0xa6>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b03      	cmp	r3, #3
 8003596:	d003      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0xac>
 8003598:	e005      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800359a:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <HAL_RCC_GetSysClockFreq+0x110>)
 800359c:	617b      	str	r3, [r7, #20]
      break;
 800359e:	e005      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035a0:	4b19      	ldr	r3, [pc, #100]	; (8003608 <HAL_RCC_GetSysClockFreq+0x114>)
 80035a2:	617b      	str	r3, [r7, #20]
      break;
 80035a4:	e002      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	617b      	str	r3, [r7, #20]
      break;
 80035aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035ac:	4b13      	ldr	r3, [pc, #76]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	3301      	adds	r3, #1
 80035b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	fb03 f202 	mul.w	r2, r3, r2
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	0e5b      	lsrs	r3, r3, #25
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	3301      	adds	r3, #1
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035ec:	69bb      	ldr	r3, [r7, #24]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3724      	adds	r7, #36	; 0x24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000
 8003600:	08005928 	.word	0x08005928
 8003604:	00f42400 	.word	0x00f42400
 8003608:	007a1200 	.word	0x007a1200

0800360c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003614:	2300      	movs	r3, #0
 8003616:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003618:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003624:	f7ff f9ee 	bl	8002a04 <HAL_PWREx_GetVoltageRange>
 8003628:	6178      	str	r0, [r7, #20]
 800362a:	e014      	b.n	8003656 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800362c:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003630:	4a24      	ldr	r2, [pc, #144]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003636:	6593      	str	r3, [r2, #88]	; 0x58
 8003638:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003644:	f7ff f9de 	bl	8002a04 <HAL_PWREx_GetVoltageRange>
 8003648:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800364a:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364e:	4a1d      	ldr	r2, [pc, #116]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003654:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365c:	d10b      	bne.n	8003676 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b80      	cmp	r3, #128	; 0x80
 8003662:	d919      	bls.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2ba0      	cmp	r3, #160	; 0xa0
 8003668:	d902      	bls.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800366a:	2302      	movs	r3, #2
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	e013      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003670:	2301      	movs	r3, #1
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	e010      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b80      	cmp	r3, #128	; 0x80
 800367a:	d902      	bls.n	8003682 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800367c:	2303      	movs	r3, #3
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	e00a      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b80      	cmp	r3, #128	; 0x80
 8003686:	d102      	bne.n	800368e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003688:	2302      	movs	r3, #2
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	e004      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b70      	cmp	r3, #112	; 0x70
 8003692:	d101      	bne.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003694:	2301      	movs	r3, #1
 8003696:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 0207 	bic.w	r2, r3, #7
 80036a0:	4909      	ldr	r1, [pc, #36]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40022000 	.word	0x40022000

080036cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036d4:	2300      	movs	r3, #0
 80036d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036d8:	2300      	movs	r3, #0
 80036da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d031      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036f0:	d01a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80036f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036f6:	d814      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d009      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003700:	d10f      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003702:	4b5d      	ldr	r3, [pc, #372]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	4a5c      	ldr	r2, [pc, #368]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800370e:	e00c      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3304      	adds	r3, #4
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f9ce 	bl	8003ab8 <RCCEx_PLLSAI1_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003720:	e003      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	74fb      	strb	r3, [r7, #19]
      break;
 8003726:	e000      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800372a:	7cfb      	ldrb	r3, [r7, #19]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10b      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003730:	4b51      	ldr	r3, [pc, #324]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373e:	494e      	ldr	r1, [pc, #312]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003746:	e001      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003748:	7cfb      	ldrb	r3, [r7, #19]
 800374a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 809e 	beq.w	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375a:	2300      	movs	r3, #0
 800375c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800375e:	4b46      	ldr	r3, [pc, #280]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800376e:	2300      	movs	r3, #0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00d      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003774:	4b40      	ldr	r3, [pc, #256]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003778:	4a3f      	ldr	r2, [pc, #252]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800377a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377e:	6593      	str	r3, [r2, #88]	; 0x58
 8003780:	4b3d      	ldr	r3, [pc, #244]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378c:	2301      	movs	r3, #1
 800378e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003790:	4b3a      	ldr	r3, [pc, #232]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a39      	ldr	r2, [pc, #228]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800379c:	f7fe f960 	bl	8001a60 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037a2:	e009      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a4:	f7fe f95c 	bl	8001a60 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d902      	bls.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	74fb      	strb	r3, [r7, #19]
        break;
 80037b6:	e005      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037b8:	4b30      	ldr	r3, [pc, #192]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0ef      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80037c4:	7cfb      	ldrb	r3, [r7, #19]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d15a      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037ca:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d01e      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d019      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037e6:	4b24      	ldr	r3, [pc, #144]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037f2:	4b21      	ldr	r3, [pc, #132]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f8:	4a1f      	ldr	r2, [pc, #124]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003802:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003808:	4a1b      	ldr	r2, [pc, #108]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800380a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003812:	4a19      	ldr	r2, [pc, #100]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d016      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fe f91c 	bl	8001a60 <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382a:	e00b      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382c:	f7fe f918 	bl	8001a60 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	; 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d902      	bls.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	74fb      	strb	r3, [r7, #19]
            break;
 8003842:	e006      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0ec      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003852:	7cfb      	ldrb	r3, [r7, #19]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10b      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003858:	4b07      	ldr	r3, [pc, #28]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003866:	4904      	ldr	r1, [pc, #16]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800386e:	e009      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	74bb      	strb	r3, [r7, #18]
 8003874:	e006      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000
 800387c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003880:	7cfb      	ldrb	r3, [r7, #19]
 8003882:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003884:	7c7b      	ldrb	r3, [r7, #17]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d105      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388a:	4b8a      	ldr	r3, [pc, #552]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388e:	4a89      	ldr	r2, [pc, #548]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003894:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038a2:	4b84      	ldr	r3, [pc, #528]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a8:	f023 0203 	bic.w	r2, r3, #3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	4980      	ldr	r1, [pc, #512]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038c4:	4b7b      	ldr	r3, [pc, #492]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ca:	f023 020c 	bic.w	r2, r3, #12
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	4978      	ldr	r1, [pc, #480]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038e6:	4b73      	ldr	r3, [pc, #460]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	496f      	ldr	r1, [pc, #444]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003908:	4b6a      	ldr	r3, [pc, #424]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003916:	4967      	ldr	r1, [pc, #412]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800392a:	4b62      	ldr	r3, [pc, #392]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003930:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	495e      	ldr	r1, [pc, #376]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800394c:	4b59      	ldr	r3, [pc, #356]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	4956      	ldr	r1, [pc, #344]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800396e:	4b51      	ldr	r3, [pc, #324]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003974:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	494d      	ldr	r1, [pc, #308]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d028      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003990:	4b48      	ldr	r3, [pc, #288]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003996:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	4945      	ldr	r1, [pc, #276]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ae:	d106      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b0:	4b40      	ldr	r3, [pc, #256]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4a3f      	ldr	r2, [pc, #252]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ba:	60d3      	str	r3, [r2, #12]
 80039bc:	e011      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039c6:	d10c      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	2101      	movs	r1, #1
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f872 	bl	8003ab8 <RCCEx_PLLSAI1_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039d8:	7cfb      	ldrb	r3, [r7, #19]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80039de:	7cfb      	ldrb	r3, [r7, #19]
 80039e0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d028      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039ee:	4b31      	ldr	r3, [pc, #196]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	492d      	ldr	r1, [pc, #180]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a0c:	d106      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a0e:	4b29      	ldr	r3, [pc, #164]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	4a28      	ldr	r2, [pc, #160]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a18:	60d3      	str	r3, [r2, #12]
 8003a1a:	e011      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a24:	d10c      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 f843 	bl	8003ab8 <RCCEx_PLLSAI1_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a36:	7cfb      	ldrb	r3, [r7, #19]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01c      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a4c:	4b19      	ldr	r3, [pc, #100]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5a:	4916      	ldr	r1, [pc, #88]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a6a:	d10c      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	2102      	movs	r1, #2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 f820 	bl	8003ab8 <RCCEx_PLLSAI1_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a7c:	7cfb      	ldrb	r3, [r7, #19]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003a82:	7cfb      	ldrb	r3, [r7, #19]
 8003a84:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a92:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a98:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa0:	4904      	ldr	r1, [pc, #16]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003aa8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40021000 	.word	0x40021000

08003ab8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ac6:	4b74      	ldr	r3, [pc, #464]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d018      	beq.n	8003b04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ad2:	4b71      	ldr	r3, [pc, #452]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0203 	and.w	r2, r3, #3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d10d      	bne.n	8003afe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003aea:	4b6b      	ldr	r3, [pc, #428]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	091b      	lsrs	r3, r3, #4
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
       ||
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d047      	beq.n	8003b8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	73fb      	strb	r3, [r7, #15]
 8003b02:	e044      	b.n	8003b8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d018      	beq.n	8003b3e <RCCEx_PLLSAI1_Config+0x86>
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d825      	bhi.n	8003b5c <RCCEx_PLLSAI1_Config+0xa4>
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d002      	beq.n	8003b1a <RCCEx_PLLSAI1_Config+0x62>
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d009      	beq.n	8003b2c <RCCEx_PLLSAI1_Config+0x74>
 8003b18:	e020      	b.n	8003b5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b1a:	4b5f      	ldr	r3, [pc, #380]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d11d      	bne.n	8003b62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b2a:	e01a      	b.n	8003b62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b2c:	4b5a      	ldr	r3, [pc, #360]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d116      	bne.n	8003b66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b3c:	e013      	b.n	8003b66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b3e:	4b56      	ldr	r3, [pc, #344]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10f      	bne.n	8003b6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b4a:	4b53      	ldr	r3, [pc, #332]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b5a:	e006      	b.n	8003b6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b60:	e004      	b.n	8003b6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b62:	bf00      	nop
 8003b64:	e002      	b.n	8003b6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b66:	bf00      	nop
 8003b68:	e000      	b.n	8003b6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10d      	bne.n	8003b8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b72:	4b49      	ldr	r3, [pc, #292]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6819      	ldr	r1, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	430b      	orrs	r3, r1
 8003b88:	4943      	ldr	r1, [pc, #268]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d17c      	bne.n	8003c8e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b94:	4b40      	ldr	r3, [pc, #256]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a3f      	ldr	r2, [pc, #252]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba0:	f7fd ff5e 	bl	8001a60 <HAL_GetTick>
 8003ba4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ba6:	e009      	b.n	8003bbc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ba8:	f7fd ff5a 	bl	8001a60 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d902      	bls.n	8003bbc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	73fb      	strb	r3, [r7, #15]
        break;
 8003bba:	e005      	b.n	8003bc8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bbc:	4b36      	ldr	r3, [pc, #216]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1ef      	bne.n	8003ba8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d15f      	bne.n	8003c8e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d110      	bne.n	8003bf6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bd4:	4b30      	ldr	r3, [pc, #192]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003bdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6892      	ldr	r2, [r2, #8]
 8003be4:	0211      	lsls	r1, r2, #8
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68d2      	ldr	r2, [r2, #12]
 8003bea:	06d2      	lsls	r2, r2, #27
 8003bec:	430a      	orrs	r2, r1
 8003bee:	492a      	ldr	r1, [pc, #168]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	610b      	str	r3, [r1, #16]
 8003bf4:	e027      	b.n	8003c46 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d112      	bne.n	8003c22 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bfc:	4b26      	ldr	r3, [pc, #152]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6892      	ldr	r2, [r2, #8]
 8003c0c:	0211      	lsls	r1, r2, #8
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6912      	ldr	r2, [r2, #16]
 8003c12:	0852      	lsrs	r2, r2, #1
 8003c14:	3a01      	subs	r2, #1
 8003c16:	0552      	lsls	r2, r2, #21
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	491f      	ldr	r1, [pc, #124]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	610b      	str	r3, [r1, #16]
 8003c20:	e011      	b.n	8003c46 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c22:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6892      	ldr	r2, [r2, #8]
 8003c32:	0211      	lsls	r1, r2, #8
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6952      	ldr	r2, [r2, #20]
 8003c38:	0852      	lsrs	r2, r2, #1
 8003c3a:	3a01      	subs	r2, #1
 8003c3c:	0652      	lsls	r2, r2, #25
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	4915      	ldr	r1, [pc, #84]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c46:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c50:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c52:	f7fd ff05 	bl	8001a60 <HAL_GetTick>
 8003c56:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c58:	e009      	b.n	8003c6e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c5a:	f7fd ff01 	bl	8001a60 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d902      	bls.n	8003c6e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	73fb      	strb	r3, [r7, #15]
          break;
 8003c6c:	e005      	b.n	8003c7a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0ef      	beq.n	8003c5a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d106      	bne.n	8003c8e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	4903      	ldr	r1, [pc, #12]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40021000 	.word	0x40021000

08003c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e049      	b.n	8003d42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fd fda8 	bl	8001818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	f000 f94c 	bl	8003f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d001      	beq.n	8003d64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e033      	b.n	8003dcc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a19      	ldr	r2, [pc, #100]	; (8003dd8 <HAL_TIM_Base_Start+0x8c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d009      	beq.n	8003d8a <HAL_TIM_Base_Start+0x3e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7e:	d004      	beq.n	8003d8a <HAL_TIM_Base_Start+0x3e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a15      	ldr	r2, [pc, #84]	; (8003ddc <HAL_TIM_Base_Start+0x90>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d115      	bne.n	8003db6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <HAL_TIM_Base_Start+0x94>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b06      	cmp	r3, #6
 8003d9a:	d015      	beq.n	8003dc8 <HAL_TIM_Base_Start+0x7c>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da2:	d011      	beq.n	8003dc8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db4:	e008      	b.n	8003dc8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0201 	orr.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	e000      	b.n	8003dca <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	40012c00 	.word	0x40012c00
 8003ddc:	40014000 	.word	0x40014000
 8003de0:	00010007 	.word	0x00010007

08003de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_TIM_ConfigClockSource+0x1c>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e0b6      	b.n	8003f6e <HAL_TIM_ConfigClockSource+0x18a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3c:	d03e      	beq.n	8003ebc <HAL_TIM_ConfigClockSource+0xd8>
 8003e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e42:	f200 8087 	bhi.w	8003f54 <HAL_TIM_ConfigClockSource+0x170>
 8003e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4a:	f000 8086 	beq.w	8003f5a <HAL_TIM_ConfigClockSource+0x176>
 8003e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e52:	d87f      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x170>
 8003e54:	2b70      	cmp	r3, #112	; 0x70
 8003e56:	d01a      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0xaa>
 8003e58:	2b70      	cmp	r3, #112	; 0x70
 8003e5a:	d87b      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x170>
 8003e5c:	2b60      	cmp	r3, #96	; 0x60
 8003e5e:	d050      	beq.n	8003f02 <HAL_TIM_ConfigClockSource+0x11e>
 8003e60:	2b60      	cmp	r3, #96	; 0x60
 8003e62:	d877      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x170>
 8003e64:	2b50      	cmp	r3, #80	; 0x50
 8003e66:	d03c      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0xfe>
 8003e68:	2b50      	cmp	r3, #80	; 0x50
 8003e6a:	d873      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x170>
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	d058      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x13e>
 8003e70:	2b40      	cmp	r3, #64	; 0x40
 8003e72:	d86f      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x170>
 8003e74:	2b30      	cmp	r3, #48	; 0x30
 8003e76:	d064      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x15e>
 8003e78:	2b30      	cmp	r3, #48	; 0x30
 8003e7a:	d86b      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x170>
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d060      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x15e>
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d867      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x170>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d05c      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x15e>
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d05a      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x15e>
 8003e8c:	e062      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6899      	ldr	r1, [r3, #8]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f000 f949 	bl	8004134 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	609a      	str	r2, [r3, #8]
      break;
 8003eba:	e04f      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	6899      	ldr	r1, [r3, #8]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f000 f932 	bl	8004134 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ede:	609a      	str	r2, [r3, #8]
      break;
 8003ee0:	e03c      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6859      	ldr	r1, [r3, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f000 f8a6 	bl	8004040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2150      	movs	r1, #80	; 0x50
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 f8ff 	bl	80040fe <TIM_ITRx_SetConfig>
      break;
 8003f00:	e02c      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f000 f8c5 	bl	800409e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2160      	movs	r1, #96	; 0x60
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 f8ef 	bl	80040fe <TIM_ITRx_SetConfig>
      break;
 8003f20:	e01c      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f000 f886 	bl	8004040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2140      	movs	r1, #64	; 0x40
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f8df 	bl	80040fe <TIM_ITRx_SetConfig>
      break;
 8003f40:	e00c      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	f000 f8d6 	bl	80040fe <TIM_ITRx_SetConfig>
      break;
 8003f52:	e003      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
      break;
 8003f58:	e000      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003f5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a2a      	ldr	r2, [pc, #168]	; (8004034 <TIM_Base_SetConfig+0xbc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_Base_SetConfig+0x20>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f96:	d108      	bne.n	8003faa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a21      	ldr	r2, [pc, #132]	; (8004034 <TIM_Base_SetConfig+0xbc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_Base_SetConfig+0x52>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0x52>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a1e      	ldr	r2, [pc, #120]	; (8004038 <TIM_Base_SetConfig+0xc0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0x52>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a1d      	ldr	r2, [pc, #116]	; (800403c <TIM_Base_SetConfig+0xc4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0c      	ldr	r2, [pc, #48]	; (8004034 <TIM_Base_SetConfig+0xbc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d007      	beq.n	8004018 <TIM_Base_SetConfig+0xa0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0b      	ldr	r2, [pc, #44]	; (8004038 <TIM_Base_SetConfig+0xc0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_Base_SetConfig+0xa0>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <TIM_Base_SetConfig+0xc4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d103      	bne.n	8004020 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	615a      	str	r2, [r3, #20]
}
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40012c00 	.word	0x40012c00
 8004038:	40014000 	.word	0x40014000
 800403c:	40014400 	.word	0x40014400

08004040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	f023 0201 	bic.w	r2, r3, #1
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800406a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f023 030a 	bic.w	r3, r3, #10
 800407c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800409e:	b480      	push	{r7}
 80040a0:	b087      	sub	sp, #28
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	f023 0210 	bic.w	r2, r3, #16
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	031b      	lsls	r3, r3, #12
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	621a      	str	r2, [r3, #32]
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040fe:	b480      	push	{r7}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	f043 0307 	orr.w	r3, r3, #7
 8004120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	609a      	str	r2, [r3, #8]
}
 8004128:	bf00      	nop
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800414e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	021a      	lsls	r2, r3, #8
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	431a      	orrs	r2, r3
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4313      	orrs	r3, r2
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	609a      	str	r2, [r3, #8]
}
 8004168:	bf00      	nop
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004188:	2302      	movs	r3, #2
 800418a:	e04f      	b.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a21      	ldr	r2, [pc, #132]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d108      	bne.n	80041c8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a14      	ldr	r2, [pc, #80]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d009      	beq.n	8004200 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f4:	d004      	beq.n	8004200 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a10      	ldr	r2, [pc, #64]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d10c      	bne.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004206:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	4313      	orrs	r3, r2
 8004210:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	40012c00 	.word	0x40012c00
 800423c:	40014000 	.word	0x40014000

08004240 <__errno>:
 8004240:	4b01      	ldr	r3, [pc, #4]	; (8004248 <__errno+0x8>)
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	20000014 	.word	0x20000014

0800424c <__libc_init_array>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	4d0d      	ldr	r5, [pc, #52]	; (8004284 <__libc_init_array+0x38>)
 8004250:	4c0d      	ldr	r4, [pc, #52]	; (8004288 <__libc_init_array+0x3c>)
 8004252:	1b64      	subs	r4, r4, r5
 8004254:	10a4      	asrs	r4, r4, #2
 8004256:	2600      	movs	r6, #0
 8004258:	42a6      	cmp	r6, r4
 800425a:	d109      	bne.n	8004270 <__libc_init_array+0x24>
 800425c:	4d0b      	ldr	r5, [pc, #44]	; (800428c <__libc_init_array+0x40>)
 800425e:	4c0c      	ldr	r4, [pc, #48]	; (8004290 <__libc_init_array+0x44>)
 8004260:	f000 fc8e 	bl	8004b80 <_init>
 8004264:	1b64      	subs	r4, r4, r5
 8004266:	10a4      	asrs	r4, r4, #2
 8004268:	2600      	movs	r6, #0
 800426a:	42a6      	cmp	r6, r4
 800426c:	d105      	bne.n	800427a <__libc_init_array+0x2e>
 800426e:	bd70      	pop	{r4, r5, r6, pc}
 8004270:	f855 3b04 	ldr.w	r3, [r5], #4
 8004274:	4798      	blx	r3
 8004276:	3601      	adds	r6, #1
 8004278:	e7ee      	b.n	8004258 <__libc_init_array+0xc>
 800427a:	f855 3b04 	ldr.w	r3, [r5], #4
 800427e:	4798      	blx	r3
 8004280:	3601      	adds	r6, #1
 8004282:	e7f2      	b.n	800426a <__libc_init_array+0x1e>
 8004284:	0800598c 	.word	0x0800598c
 8004288:	0800598c 	.word	0x0800598c
 800428c:	0800598c 	.word	0x0800598c
 8004290:	08005990 	.word	0x08005990

08004294 <memset>:
 8004294:	4402      	add	r2, r0
 8004296:	4603      	mov	r3, r0
 8004298:	4293      	cmp	r3, r2
 800429a:	d100      	bne.n	800429e <memset+0xa>
 800429c:	4770      	bx	lr
 800429e:	f803 1b01 	strb.w	r1, [r3], #1
 80042a2:	e7f9      	b.n	8004298 <memset+0x4>

080042a4 <siprintf>:
 80042a4:	b40e      	push	{r1, r2, r3}
 80042a6:	b500      	push	{lr}
 80042a8:	b09c      	sub	sp, #112	; 0x70
 80042aa:	ab1d      	add	r3, sp, #116	; 0x74
 80042ac:	9002      	str	r0, [sp, #8]
 80042ae:	9006      	str	r0, [sp, #24]
 80042b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042b4:	4809      	ldr	r0, [pc, #36]	; (80042dc <siprintf+0x38>)
 80042b6:	9107      	str	r1, [sp, #28]
 80042b8:	9104      	str	r1, [sp, #16]
 80042ba:	4909      	ldr	r1, [pc, #36]	; (80042e0 <siprintf+0x3c>)
 80042bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80042c0:	9105      	str	r1, [sp, #20]
 80042c2:	6800      	ldr	r0, [r0, #0]
 80042c4:	9301      	str	r3, [sp, #4]
 80042c6:	a902      	add	r1, sp, #8
 80042c8:	f000 f868 	bl	800439c <_svfiprintf_r>
 80042cc:	9b02      	ldr	r3, [sp, #8]
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
 80042d2:	b01c      	add	sp, #112	; 0x70
 80042d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80042d8:	b003      	add	sp, #12
 80042da:	4770      	bx	lr
 80042dc:	20000014 	.word	0x20000014
 80042e0:	ffff0208 	.word	0xffff0208

080042e4 <__ssputs_r>:
 80042e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042e8:	688e      	ldr	r6, [r1, #8]
 80042ea:	429e      	cmp	r6, r3
 80042ec:	4682      	mov	sl, r0
 80042ee:	460c      	mov	r4, r1
 80042f0:	4690      	mov	r8, r2
 80042f2:	461f      	mov	r7, r3
 80042f4:	d838      	bhi.n	8004368 <__ssputs_r+0x84>
 80042f6:	898a      	ldrh	r2, [r1, #12]
 80042f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042fc:	d032      	beq.n	8004364 <__ssputs_r+0x80>
 80042fe:	6825      	ldr	r5, [r4, #0]
 8004300:	6909      	ldr	r1, [r1, #16]
 8004302:	eba5 0901 	sub.w	r9, r5, r1
 8004306:	6965      	ldr	r5, [r4, #20]
 8004308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800430c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004310:	3301      	adds	r3, #1
 8004312:	444b      	add	r3, r9
 8004314:	106d      	asrs	r5, r5, #1
 8004316:	429d      	cmp	r5, r3
 8004318:	bf38      	it	cc
 800431a:	461d      	movcc	r5, r3
 800431c:	0553      	lsls	r3, r2, #21
 800431e:	d531      	bpl.n	8004384 <__ssputs_r+0xa0>
 8004320:	4629      	mov	r1, r5
 8004322:	f000 fb63 	bl	80049ec <_malloc_r>
 8004326:	4606      	mov	r6, r0
 8004328:	b950      	cbnz	r0, 8004340 <__ssputs_r+0x5c>
 800432a:	230c      	movs	r3, #12
 800432c:	f8ca 3000 	str.w	r3, [sl]
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004336:	81a3      	strh	r3, [r4, #12]
 8004338:	f04f 30ff 	mov.w	r0, #4294967295
 800433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004340:	6921      	ldr	r1, [r4, #16]
 8004342:	464a      	mov	r2, r9
 8004344:	f000 fabe 	bl	80048c4 <memcpy>
 8004348:	89a3      	ldrh	r3, [r4, #12]
 800434a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800434e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004352:	81a3      	strh	r3, [r4, #12]
 8004354:	6126      	str	r6, [r4, #16]
 8004356:	6165      	str	r5, [r4, #20]
 8004358:	444e      	add	r6, r9
 800435a:	eba5 0509 	sub.w	r5, r5, r9
 800435e:	6026      	str	r6, [r4, #0]
 8004360:	60a5      	str	r5, [r4, #8]
 8004362:	463e      	mov	r6, r7
 8004364:	42be      	cmp	r6, r7
 8004366:	d900      	bls.n	800436a <__ssputs_r+0x86>
 8004368:	463e      	mov	r6, r7
 800436a:	6820      	ldr	r0, [r4, #0]
 800436c:	4632      	mov	r2, r6
 800436e:	4641      	mov	r1, r8
 8004370:	f000 fab6 	bl	80048e0 <memmove>
 8004374:	68a3      	ldr	r3, [r4, #8]
 8004376:	1b9b      	subs	r3, r3, r6
 8004378:	60a3      	str	r3, [r4, #8]
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	4433      	add	r3, r6
 800437e:	6023      	str	r3, [r4, #0]
 8004380:	2000      	movs	r0, #0
 8004382:	e7db      	b.n	800433c <__ssputs_r+0x58>
 8004384:	462a      	mov	r2, r5
 8004386:	f000 fba5 	bl	8004ad4 <_realloc_r>
 800438a:	4606      	mov	r6, r0
 800438c:	2800      	cmp	r0, #0
 800438e:	d1e1      	bne.n	8004354 <__ssputs_r+0x70>
 8004390:	6921      	ldr	r1, [r4, #16]
 8004392:	4650      	mov	r0, sl
 8004394:	f000 fabe 	bl	8004914 <_free_r>
 8004398:	e7c7      	b.n	800432a <__ssputs_r+0x46>
	...

0800439c <_svfiprintf_r>:
 800439c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a0:	4698      	mov	r8, r3
 80043a2:	898b      	ldrh	r3, [r1, #12]
 80043a4:	061b      	lsls	r3, r3, #24
 80043a6:	b09d      	sub	sp, #116	; 0x74
 80043a8:	4607      	mov	r7, r0
 80043aa:	460d      	mov	r5, r1
 80043ac:	4614      	mov	r4, r2
 80043ae:	d50e      	bpl.n	80043ce <_svfiprintf_r+0x32>
 80043b0:	690b      	ldr	r3, [r1, #16]
 80043b2:	b963      	cbnz	r3, 80043ce <_svfiprintf_r+0x32>
 80043b4:	2140      	movs	r1, #64	; 0x40
 80043b6:	f000 fb19 	bl	80049ec <_malloc_r>
 80043ba:	6028      	str	r0, [r5, #0]
 80043bc:	6128      	str	r0, [r5, #16]
 80043be:	b920      	cbnz	r0, 80043ca <_svfiprintf_r+0x2e>
 80043c0:	230c      	movs	r3, #12
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295
 80043c8:	e0d1      	b.n	800456e <_svfiprintf_r+0x1d2>
 80043ca:	2340      	movs	r3, #64	; 0x40
 80043cc:	616b      	str	r3, [r5, #20]
 80043ce:	2300      	movs	r3, #0
 80043d0:	9309      	str	r3, [sp, #36]	; 0x24
 80043d2:	2320      	movs	r3, #32
 80043d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80043dc:	2330      	movs	r3, #48	; 0x30
 80043de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004588 <_svfiprintf_r+0x1ec>
 80043e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043e6:	f04f 0901 	mov.w	r9, #1
 80043ea:	4623      	mov	r3, r4
 80043ec:	469a      	mov	sl, r3
 80043ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043f2:	b10a      	cbz	r2, 80043f8 <_svfiprintf_r+0x5c>
 80043f4:	2a25      	cmp	r2, #37	; 0x25
 80043f6:	d1f9      	bne.n	80043ec <_svfiprintf_r+0x50>
 80043f8:	ebba 0b04 	subs.w	fp, sl, r4
 80043fc:	d00b      	beq.n	8004416 <_svfiprintf_r+0x7a>
 80043fe:	465b      	mov	r3, fp
 8004400:	4622      	mov	r2, r4
 8004402:	4629      	mov	r1, r5
 8004404:	4638      	mov	r0, r7
 8004406:	f7ff ff6d 	bl	80042e4 <__ssputs_r>
 800440a:	3001      	adds	r0, #1
 800440c:	f000 80aa 	beq.w	8004564 <_svfiprintf_r+0x1c8>
 8004410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004412:	445a      	add	r2, fp
 8004414:	9209      	str	r2, [sp, #36]	; 0x24
 8004416:	f89a 3000 	ldrb.w	r3, [sl]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 80a2 	beq.w	8004564 <_svfiprintf_r+0x1c8>
 8004420:	2300      	movs	r3, #0
 8004422:	f04f 32ff 	mov.w	r2, #4294967295
 8004426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800442a:	f10a 0a01 	add.w	sl, sl, #1
 800442e:	9304      	str	r3, [sp, #16]
 8004430:	9307      	str	r3, [sp, #28]
 8004432:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004436:	931a      	str	r3, [sp, #104]	; 0x68
 8004438:	4654      	mov	r4, sl
 800443a:	2205      	movs	r2, #5
 800443c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004440:	4851      	ldr	r0, [pc, #324]	; (8004588 <_svfiprintf_r+0x1ec>)
 8004442:	f7fb fec5 	bl	80001d0 <memchr>
 8004446:	9a04      	ldr	r2, [sp, #16]
 8004448:	b9d8      	cbnz	r0, 8004482 <_svfiprintf_r+0xe6>
 800444a:	06d0      	lsls	r0, r2, #27
 800444c:	bf44      	itt	mi
 800444e:	2320      	movmi	r3, #32
 8004450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004454:	0711      	lsls	r1, r2, #28
 8004456:	bf44      	itt	mi
 8004458:	232b      	movmi	r3, #43	; 0x2b
 800445a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800445e:	f89a 3000 	ldrb.w	r3, [sl]
 8004462:	2b2a      	cmp	r3, #42	; 0x2a
 8004464:	d015      	beq.n	8004492 <_svfiprintf_r+0xf6>
 8004466:	9a07      	ldr	r2, [sp, #28]
 8004468:	4654      	mov	r4, sl
 800446a:	2000      	movs	r0, #0
 800446c:	f04f 0c0a 	mov.w	ip, #10
 8004470:	4621      	mov	r1, r4
 8004472:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004476:	3b30      	subs	r3, #48	; 0x30
 8004478:	2b09      	cmp	r3, #9
 800447a:	d94e      	bls.n	800451a <_svfiprintf_r+0x17e>
 800447c:	b1b0      	cbz	r0, 80044ac <_svfiprintf_r+0x110>
 800447e:	9207      	str	r2, [sp, #28]
 8004480:	e014      	b.n	80044ac <_svfiprintf_r+0x110>
 8004482:	eba0 0308 	sub.w	r3, r0, r8
 8004486:	fa09 f303 	lsl.w	r3, r9, r3
 800448a:	4313      	orrs	r3, r2
 800448c:	9304      	str	r3, [sp, #16]
 800448e:	46a2      	mov	sl, r4
 8004490:	e7d2      	b.n	8004438 <_svfiprintf_r+0x9c>
 8004492:	9b03      	ldr	r3, [sp, #12]
 8004494:	1d19      	adds	r1, r3, #4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	9103      	str	r1, [sp, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	bfbb      	ittet	lt
 800449e:	425b      	neglt	r3, r3
 80044a0:	f042 0202 	orrlt.w	r2, r2, #2
 80044a4:	9307      	strge	r3, [sp, #28]
 80044a6:	9307      	strlt	r3, [sp, #28]
 80044a8:	bfb8      	it	lt
 80044aa:	9204      	strlt	r2, [sp, #16]
 80044ac:	7823      	ldrb	r3, [r4, #0]
 80044ae:	2b2e      	cmp	r3, #46	; 0x2e
 80044b0:	d10c      	bne.n	80044cc <_svfiprintf_r+0x130>
 80044b2:	7863      	ldrb	r3, [r4, #1]
 80044b4:	2b2a      	cmp	r3, #42	; 0x2a
 80044b6:	d135      	bne.n	8004524 <_svfiprintf_r+0x188>
 80044b8:	9b03      	ldr	r3, [sp, #12]
 80044ba:	1d1a      	adds	r2, r3, #4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	9203      	str	r2, [sp, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bfb8      	it	lt
 80044c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80044c8:	3402      	adds	r4, #2
 80044ca:	9305      	str	r3, [sp, #20]
 80044cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004598 <_svfiprintf_r+0x1fc>
 80044d0:	7821      	ldrb	r1, [r4, #0]
 80044d2:	2203      	movs	r2, #3
 80044d4:	4650      	mov	r0, sl
 80044d6:	f7fb fe7b 	bl	80001d0 <memchr>
 80044da:	b140      	cbz	r0, 80044ee <_svfiprintf_r+0x152>
 80044dc:	2340      	movs	r3, #64	; 0x40
 80044de:	eba0 000a 	sub.w	r0, r0, sl
 80044e2:	fa03 f000 	lsl.w	r0, r3, r0
 80044e6:	9b04      	ldr	r3, [sp, #16]
 80044e8:	4303      	orrs	r3, r0
 80044ea:	3401      	adds	r4, #1
 80044ec:	9304      	str	r3, [sp, #16]
 80044ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044f2:	4826      	ldr	r0, [pc, #152]	; (800458c <_svfiprintf_r+0x1f0>)
 80044f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044f8:	2206      	movs	r2, #6
 80044fa:	f7fb fe69 	bl	80001d0 <memchr>
 80044fe:	2800      	cmp	r0, #0
 8004500:	d038      	beq.n	8004574 <_svfiprintf_r+0x1d8>
 8004502:	4b23      	ldr	r3, [pc, #140]	; (8004590 <_svfiprintf_r+0x1f4>)
 8004504:	bb1b      	cbnz	r3, 800454e <_svfiprintf_r+0x1b2>
 8004506:	9b03      	ldr	r3, [sp, #12]
 8004508:	3307      	adds	r3, #7
 800450a:	f023 0307 	bic.w	r3, r3, #7
 800450e:	3308      	adds	r3, #8
 8004510:	9303      	str	r3, [sp, #12]
 8004512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004514:	4433      	add	r3, r6
 8004516:	9309      	str	r3, [sp, #36]	; 0x24
 8004518:	e767      	b.n	80043ea <_svfiprintf_r+0x4e>
 800451a:	fb0c 3202 	mla	r2, ip, r2, r3
 800451e:	460c      	mov	r4, r1
 8004520:	2001      	movs	r0, #1
 8004522:	e7a5      	b.n	8004470 <_svfiprintf_r+0xd4>
 8004524:	2300      	movs	r3, #0
 8004526:	3401      	adds	r4, #1
 8004528:	9305      	str	r3, [sp, #20]
 800452a:	4619      	mov	r1, r3
 800452c:	f04f 0c0a 	mov.w	ip, #10
 8004530:	4620      	mov	r0, r4
 8004532:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004536:	3a30      	subs	r2, #48	; 0x30
 8004538:	2a09      	cmp	r2, #9
 800453a:	d903      	bls.n	8004544 <_svfiprintf_r+0x1a8>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0c5      	beq.n	80044cc <_svfiprintf_r+0x130>
 8004540:	9105      	str	r1, [sp, #20]
 8004542:	e7c3      	b.n	80044cc <_svfiprintf_r+0x130>
 8004544:	fb0c 2101 	mla	r1, ip, r1, r2
 8004548:	4604      	mov	r4, r0
 800454a:	2301      	movs	r3, #1
 800454c:	e7f0      	b.n	8004530 <_svfiprintf_r+0x194>
 800454e:	ab03      	add	r3, sp, #12
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	462a      	mov	r2, r5
 8004554:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <_svfiprintf_r+0x1f8>)
 8004556:	a904      	add	r1, sp, #16
 8004558:	4638      	mov	r0, r7
 800455a:	f3af 8000 	nop.w
 800455e:	1c42      	adds	r2, r0, #1
 8004560:	4606      	mov	r6, r0
 8004562:	d1d6      	bne.n	8004512 <_svfiprintf_r+0x176>
 8004564:	89ab      	ldrh	r3, [r5, #12]
 8004566:	065b      	lsls	r3, r3, #25
 8004568:	f53f af2c 	bmi.w	80043c4 <_svfiprintf_r+0x28>
 800456c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800456e:	b01d      	add	sp, #116	; 0x74
 8004570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004574:	ab03      	add	r3, sp, #12
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	462a      	mov	r2, r5
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <_svfiprintf_r+0x1f8>)
 800457c:	a904      	add	r1, sp, #16
 800457e:	4638      	mov	r0, r7
 8004580:	f000 f87a 	bl	8004678 <_printf_i>
 8004584:	e7eb      	b.n	800455e <_svfiprintf_r+0x1c2>
 8004586:	bf00      	nop
 8004588:	08005958 	.word	0x08005958
 800458c:	08005962 	.word	0x08005962
 8004590:	00000000 	.word	0x00000000
 8004594:	080042e5 	.word	0x080042e5
 8004598:	0800595e 	.word	0x0800595e

0800459c <_printf_common>:
 800459c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a0:	4616      	mov	r6, r2
 80045a2:	4699      	mov	r9, r3
 80045a4:	688a      	ldr	r2, [r1, #8]
 80045a6:	690b      	ldr	r3, [r1, #16]
 80045a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045ac:	4293      	cmp	r3, r2
 80045ae:	bfb8      	it	lt
 80045b0:	4613      	movlt	r3, r2
 80045b2:	6033      	str	r3, [r6, #0]
 80045b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045b8:	4607      	mov	r7, r0
 80045ba:	460c      	mov	r4, r1
 80045bc:	b10a      	cbz	r2, 80045c2 <_printf_common+0x26>
 80045be:	3301      	adds	r3, #1
 80045c0:	6033      	str	r3, [r6, #0]
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	0699      	lsls	r1, r3, #26
 80045c6:	bf42      	ittt	mi
 80045c8:	6833      	ldrmi	r3, [r6, #0]
 80045ca:	3302      	addmi	r3, #2
 80045cc:	6033      	strmi	r3, [r6, #0]
 80045ce:	6825      	ldr	r5, [r4, #0]
 80045d0:	f015 0506 	ands.w	r5, r5, #6
 80045d4:	d106      	bne.n	80045e4 <_printf_common+0x48>
 80045d6:	f104 0a19 	add.w	sl, r4, #25
 80045da:	68e3      	ldr	r3, [r4, #12]
 80045dc:	6832      	ldr	r2, [r6, #0]
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	42ab      	cmp	r3, r5
 80045e2:	dc26      	bgt.n	8004632 <_printf_common+0x96>
 80045e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045e8:	1e13      	subs	r3, r2, #0
 80045ea:	6822      	ldr	r2, [r4, #0]
 80045ec:	bf18      	it	ne
 80045ee:	2301      	movne	r3, #1
 80045f0:	0692      	lsls	r2, r2, #26
 80045f2:	d42b      	bmi.n	800464c <_printf_common+0xb0>
 80045f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045f8:	4649      	mov	r1, r9
 80045fa:	4638      	mov	r0, r7
 80045fc:	47c0      	blx	r8
 80045fe:	3001      	adds	r0, #1
 8004600:	d01e      	beq.n	8004640 <_printf_common+0xa4>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	68e5      	ldr	r5, [r4, #12]
 8004606:	6832      	ldr	r2, [r6, #0]
 8004608:	f003 0306 	and.w	r3, r3, #6
 800460c:	2b04      	cmp	r3, #4
 800460e:	bf08      	it	eq
 8004610:	1aad      	subeq	r5, r5, r2
 8004612:	68a3      	ldr	r3, [r4, #8]
 8004614:	6922      	ldr	r2, [r4, #16]
 8004616:	bf0c      	ite	eq
 8004618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800461c:	2500      	movne	r5, #0
 800461e:	4293      	cmp	r3, r2
 8004620:	bfc4      	itt	gt
 8004622:	1a9b      	subgt	r3, r3, r2
 8004624:	18ed      	addgt	r5, r5, r3
 8004626:	2600      	movs	r6, #0
 8004628:	341a      	adds	r4, #26
 800462a:	42b5      	cmp	r5, r6
 800462c:	d11a      	bne.n	8004664 <_printf_common+0xc8>
 800462e:	2000      	movs	r0, #0
 8004630:	e008      	b.n	8004644 <_printf_common+0xa8>
 8004632:	2301      	movs	r3, #1
 8004634:	4652      	mov	r2, sl
 8004636:	4649      	mov	r1, r9
 8004638:	4638      	mov	r0, r7
 800463a:	47c0      	blx	r8
 800463c:	3001      	adds	r0, #1
 800463e:	d103      	bne.n	8004648 <_printf_common+0xac>
 8004640:	f04f 30ff 	mov.w	r0, #4294967295
 8004644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004648:	3501      	adds	r5, #1
 800464a:	e7c6      	b.n	80045da <_printf_common+0x3e>
 800464c:	18e1      	adds	r1, r4, r3
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	2030      	movs	r0, #48	; 0x30
 8004652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004656:	4422      	add	r2, r4
 8004658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800465c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004660:	3302      	adds	r3, #2
 8004662:	e7c7      	b.n	80045f4 <_printf_common+0x58>
 8004664:	2301      	movs	r3, #1
 8004666:	4622      	mov	r2, r4
 8004668:	4649      	mov	r1, r9
 800466a:	4638      	mov	r0, r7
 800466c:	47c0      	blx	r8
 800466e:	3001      	adds	r0, #1
 8004670:	d0e6      	beq.n	8004640 <_printf_common+0xa4>
 8004672:	3601      	adds	r6, #1
 8004674:	e7d9      	b.n	800462a <_printf_common+0x8e>
	...

08004678 <_printf_i>:
 8004678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800467c:	7e0f      	ldrb	r7, [r1, #24]
 800467e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004680:	2f78      	cmp	r7, #120	; 0x78
 8004682:	4691      	mov	r9, r2
 8004684:	4680      	mov	r8, r0
 8004686:	460c      	mov	r4, r1
 8004688:	469a      	mov	sl, r3
 800468a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800468e:	d807      	bhi.n	80046a0 <_printf_i+0x28>
 8004690:	2f62      	cmp	r7, #98	; 0x62
 8004692:	d80a      	bhi.n	80046aa <_printf_i+0x32>
 8004694:	2f00      	cmp	r7, #0
 8004696:	f000 80d8 	beq.w	800484a <_printf_i+0x1d2>
 800469a:	2f58      	cmp	r7, #88	; 0x58
 800469c:	f000 80a3 	beq.w	80047e6 <_printf_i+0x16e>
 80046a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046a8:	e03a      	b.n	8004720 <_printf_i+0xa8>
 80046aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046ae:	2b15      	cmp	r3, #21
 80046b0:	d8f6      	bhi.n	80046a0 <_printf_i+0x28>
 80046b2:	a101      	add	r1, pc, #4	; (adr r1, 80046b8 <_printf_i+0x40>)
 80046b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046b8:	08004711 	.word	0x08004711
 80046bc:	08004725 	.word	0x08004725
 80046c0:	080046a1 	.word	0x080046a1
 80046c4:	080046a1 	.word	0x080046a1
 80046c8:	080046a1 	.word	0x080046a1
 80046cc:	080046a1 	.word	0x080046a1
 80046d0:	08004725 	.word	0x08004725
 80046d4:	080046a1 	.word	0x080046a1
 80046d8:	080046a1 	.word	0x080046a1
 80046dc:	080046a1 	.word	0x080046a1
 80046e0:	080046a1 	.word	0x080046a1
 80046e4:	08004831 	.word	0x08004831
 80046e8:	08004755 	.word	0x08004755
 80046ec:	08004813 	.word	0x08004813
 80046f0:	080046a1 	.word	0x080046a1
 80046f4:	080046a1 	.word	0x080046a1
 80046f8:	08004853 	.word	0x08004853
 80046fc:	080046a1 	.word	0x080046a1
 8004700:	08004755 	.word	0x08004755
 8004704:	080046a1 	.word	0x080046a1
 8004708:	080046a1 	.word	0x080046a1
 800470c:	0800481b 	.word	0x0800481b
 8004710:	682b      	ldr	r3, [r5, #0]
 8004712:	1d1a      	adds	r2, r3, #4
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	602a      	str	r2, [r5, #0]
 8004718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800471c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004720:	2301      	movs	r3, #1
 8004722:	e0a3      	b.n	800486c <_printf_i+0x1f4>
 8004724:	6820      	ldr	r0, [r4, #0]
 8004726:	6829      	ldr	r1, [r5, #0]
 8004728:	0606      	lsls	r6, r0, #24
 800472a:	f101 0304 	add.w	r3, r1, #4
 800472e:	d50a      	bpl.n	8004746 <_printf_i+0xce>
 8004730:	680e      	ldr	r6, [r1, #0]
 8004732:	602b      	str	r3, [r5, #0]
 8004734:	2e00      	cmp	r6, #0
 8004736:	da03      	bge.n	8004740 <_printf_i+0xc8>
 8004738:	232d      	movs	r3, #45	; 0x2d
 800473a:	4276      	negs	r6, r6
 800473c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004740:	485e      	ldr	r0, [pc, #376]	; (80048bc <_printf_i+0x244>)
 8004742:	230a      	movs	r3, #10
 8004744:	e019      	b.n	800477a <_printf_i+0x102>
 8004746:	680e      	ldr	r6, [r1, #0]
 8004748:	602b      	str	r3, [r5, #0]
 800474a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800474e:	bf18      	it	ne
 8004750:	b236      	sxthne	r6, r6
 8004752:	e7ef      	b.n	8004734 <_printf_i+0xbc>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	6820      	ldr	r0, [r4, #0]
 8004758:	1d19      	adds	r1, r3, #4
 800475a:	6029      	str	r1, [r5, #0]
 800475c:	0601      	lsls	r1, r0, #24
 800475e:	d501      	bpl.n	8004764 <_printf_i+0xec>
 8004760:	681e      	ldr	r6, [r3, #0]
 8004762:	e002      	b.n	800476a <_printf_i+0xf2>
 8004764:	0646      	lsls	r6, r0, #25
 8004766:	d5fb      	bpl.n	8004760 <_printf_i+0xe8>
 8004768:	881e      	ldrh	r6, [r3, #0]
 800476a:	4854      	ldr	r0, [pc, #336]	; (80048bc <_printf_i+0x244>)
 800476c:	2f6f      	cmp	r7, #111	; 0x6f
 800476e:	bf0c      	ite	eq
 8004770:	2308      	moveq	r3, #8
 8004772:	230a      	movne	r3, #10
 8004774:	2100      	movs	r1, #0
 8004776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800477a:	6865      	ldr	r5, [r4, #4]
 800477c:	60a5      	str	r5, [r4, #8]
 800477e:	2d00      	cmp	r5, #0
 8004780:	bfa2      	ittt	ge
 8004782:	6821      	ldrge	r1, [r4, #0]
 8004784:	f021 0104 	bicge.w	r1, r1, #4
 8004788:	6021      	strge	r1, [r4, #0]
 800478a:	b90e      	cbnz	r6, 8004790 <_printf_i+0x118>
 800478c:	2d00      	cmp	r5, #0
 800478e:	d04d      	beq.n	800482c <_printf_i+0x1b4>
 8004790:	4615      	mov	r5, r2
 8004792:	fbb6 f1f3 	udiv	r1, r6, r3
 8004796:	fb03 6711 	mls	r7, r3, r1, r6
 800479a:	5dc7      	ldrb	r7, [r0, r7]
 800479c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047a0:	4637      	mov	r7, r6
 80047a2:	42bb      	cmp	r3, r7
 80047a4:	460e      	mov	r6, r1
 80047a6:	d9f4      	bls.n	8004792 <_printf_i+0x11a>
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d10b      	bne.n	80047c4 <_printf_i+0x14c>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	07de      	lsls	r6, r3, #31
 80047b0:	d508      	bpl.n	80047c4 <_printf_i+0x14c>
 80047b2:	6923      	ldr	r3, [r4, #16]
 80047b4:	6861      	ldr	r1, [r4, #4]
 80047b6:	4299      	cmp	r1, r3
 80047b8:	bfde      	ittt	le
 80047ba:	2330      	movle	r3, #48	; 0x30
 80047bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047c4:	1b52      	subs	r2, r2, r5
 80047c6:	6122      	str	r2, [r4, #16]
 80047c8:	f8cd a000 	str.w	sl, [sp]
 80047cc:	464b      	mov	r3, r9
 80047ce:	aa03      	add	r2, sp, #12
 80047d0:	4621      	mov	r1, r4
 80047d2:	4640      	mov	r0, r8
 80047d4:	f7ff fee2 	bl	800459c <_printf_common>
 80047d8:	3001      	adds	r0, #1
 80047da:	d14c      	bne.n	8004876 <_printf_i+0x1fe>
 80047dc:	f04f 30ff 	mov.w	r0, #4294967295
 80047e0:	b004      	add	sp, #16
 80047e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e6:	4835      	ldr	r0, [pc, #212]	; (80048bc <_printf_i+0x244>)
 80047e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047ec:	6829      	ldr	r1, [r5, #0]
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80047f4:	6029      	str	r1, [r5, #0]
 80047f6:	061d      	lsls	r5, r3, #24
 80047f8:	d514      	bpl.n	8004824 <_printf_i+0x1ac>
 80047fa:	07df      	lsls	r7, r3, #31
 80047fc:	bf44      	itt	mi
 80047fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004802:	6023      	strmi	r3, [r4, #0]
 8004804:	b91e      	cbnz	r6, 800480e <_printf_i+0x196>
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	f023 0320 	bic.w	r3, r3, #32
 800480c:	6023      	str	r3, [r4, #0]
 800480e:	2310      	movs	r3, #16
 8004810:	e7b0      	b.n	8004774 <_printf_i+0xfc>
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	f043 0320 	orr.w	r3, r3, #32
 8004818:	6023      	str	r3, [r4, #0]
 800481a:	2378      	movs	r3, #120	; 0x78
 800481c:	4828      	ldr	r0, [pc, #160]	; (80048c0 <_printf_i+0x248>)
 800481e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004822:	e7e3      	b.n	80047ec <_printf_i+0x174>
 8004824:	0659      	lsls	r1, r3, #25
 8004826:	bf48      	it	mi
 8004828:	b2b6      	uxthmi	r6, r6
 800482a:	e7e6      	b.n	80047fa <_printf_i+0x182>
 800482c:	4615      	mov	r5, r2
 800482e:	e7bb      	b.n	80047a8 <_printf_i+0x130>
 8004830:	682b      	ldr	r3, [r5, #0]
 8004832:	6826      	ldr	r6, [r4, #0]
 8004834:	6961      	ldr	r1, [r4, #20]
 8004836:	1d18      	adds	r0, r3, #4
 8004838:	6028      	str	r0, [r5, #0]
 800483a:	0635      	lsls	r5, r6, #24
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	d501      	bpl.n	8004844 <_printf_i+0x1cc>
 8004840:	6019      	str	r1, [r3, #0]
 8004842:	e002      	b.n	800484a <_printf_i+0x1d2>
 8004844:	0670      	lsls	r0, r6, #25
 8004846:	d5fb      	bpl.n	8004840 <_printf_i+0x1c8>
 8004848:	8019      	strh	r1, [r3, #0]
 800484a:	2300      	movs	r3, #0
 800484c:	6123      	str	r3, [r4, #16]
 800484e:	4615      	mov	r5, r2
 8004850:	e7ba      	b.n	80047c8 <_printf_i+0x150>
 8004852:	682b      	ldr	r3, [r5, #0]
 8004854:	1d1a      	adds	r2, r3, #4
 8004856:	602a      	str	r2, [r5, #0]
 8004858:	681d      	ldr	r5, [r3, #0]
 800485a:	6862      	ldr	r2, [r4, #4]
 800485c:	2100      	movs	r1, #0
 800485e:	4628      	mov	r0, r5
 8004860:	f7fb fcb6 	bl	80001d0 <memchr>
 8004864:	b108      	cbz	r0, 800486a <_printf_i+0x1f2>
 8004866:	1b40      	subs	r0, r0, r5
 8004868:	6060      	str	r0, [r4, #4]
 800486a:	6863      	ldr	r3, [r4, #4]
 800486c:	6123      	str	r3, [r4, #16]
 800486e:	2300      	movs	r3, #0
 8004870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004874:	e7a8      	b.n	80047c8 <_printf_i+0x150>
 8004876:	6923      	ldr	r3, [r4, #16]
 8004878:	462a      	mov	r2, r5
 800487a:	4649      	mov	r1, r9
 800487c:	4640      	mov	r0, r8
 800487e:	47d0      	blx	sl
 8004880:	3001      	adds	r0, #1
 8004882:	d0ab      	beq.n	80047dc <_printf_i+0x164>
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	079b      	lsls	r3, r3, #30
 8004888:	d413      	bmi.n	80048b2 <_printf_i+0x23a>
 800488a:	68e0      	ldr	r0, [r4, #12]
 800488c:	9b03      	ldr	r3, [sp, #12]
 800488e:	4298      	cmp	r0, r3
 8004890:	bfb8      	it	lt
 8004892:	4618      	movlt	r0, r3
 8004894:	e7a4      	b.n	80047e0 <_printf_i+0x168>
 8004896:	2301      	movs	r3, #1
 8004898:	4632      	mov	r2, r6
 800489a:	4649      	mov	r1, r9
 800489c:	4640      	mov	r0, r8
 800489e:	47d0      	blx	sl
 80048a0:	3001      	adds	r0, #1
 80048a2:	d09b      	beq.n	80047dc <_printf_i+0x164>
 80048a4:	3501      	adds	r5, #1
 80048a6:	68e3      	ldr	r3, [r4, #12]
 80048a8:	9903      	ldr	r1, [sp, #12]
 80048aa:	1a5b      	subs	r3, r3, r1
 80048ac:	42ab      	cmp	r3, r5
 80048ae:	dcf2      	bgt.n	8004896 <_printf_i+0x21e>
 80048b0:	e7eb      	b.n	800488a <_printf_i+0x212>
 80048b2:	2500      	movs	r5, #0
 80048b4:	f104 0619 	add.w	r6, r4, #25
 80048b8:	e7f5      	b.n	80048a6 <_printf_i+0x22e>
 80048ba:	bf00      	nop
 80048bc:	08005969 	.word	0x08005969
 80048c0:	0800597a 	.word	0x0800597a

080048c4 <memcpy>:
 80048c4:	440a      	add	r2, r1
 80048c6:	4291      	cmp	r1, r2
 80048c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048cc:	d100      	bne.n	80048d0 <memcpy+0xc>
 80048ce:	4770      	bx	lr
 80048d0:	b510      	push	{r4, lr}
 80048d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048da:	4291      	cmp	r1, r2
 80048dc:	d1f9      	bne.n	80048d2 <memcpy+0xe>
 80048de:	bd10      	pop	{r4, pc}

080048e0 <memmove>:
 80048e0:	4288      	cmp	r0, r1
 80048e2:	b510      	push	{r4, lr}
 80048e4:	eb01 0402 	add.w	r4, r1, r2
 80048e8:	d902      	bls.n	80048f0 <memmove+0x10>
 80048ea:	4284      	cmp	r4, r0
 80048ec:	4623      	mov	r3, r4
 80048ee:	d807      	bhi.n	8004900 <memmove+0x20>
 80048f0:	1e43      	subs	r3, r0, #1
 80048f2:	42a1      	cmp	r1, r4
 80048f4:	d008      	beq.n	8004908 <memmove+0x28>
 80048f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048fe:	e7f8      	b.n	80048f2 <memmove+0x12>
 8004900:	4402      	add	r2, r0
 8004902:	4601      	mov	r1, r0
 8004904:	428a      	cmp	r2, r1
 8004906:	d100      	bne.n	800490a <memmove+0x2a>
 8004908:	bd10      	pop	{r4, pc}
 800490a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800490e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004912:	e7f7      	b.n	8004904 <memmove+0x24>

08004914 <_free_r>:
 8004914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004916:	2900      	cmp	r1, #0
 8004918:	d044      	beq.n	80049a4 <_free_r+0x90>
 800491a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800491e:	9001      	str	r0, [sp, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	f1a1 0404 	sub.w	r4, r1, #4
 8004926:	bfb8      	it	lt
 8004928:	18e4      	addlt	r4, r4, r3
 800492a:	f000 f913 	bl	8004b54 <__malloc_lock>
 800492e:	4a1e      	ldr	r2, [pc, #120]	; (80049a8 <_free_r+0x94>)
 8004930:	9801      	ldr	r0, [sp, #4]
 8004932:	6813      	ldr	r3, [r2, #0]
 8004934:	b933      	cbnz	r3, 8004944 <_free_r+0x30>
 8004936:	6063      	str	r3, [r4, #4]
 8004938:	6014      	str	r4, [r2, #0]
 800493a:	b003      	add	sp, #12
 800493c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004940:	f000 b90e 	b.w	8004b60 <__malloc_unlock>
 8004944:	42a3      	cmp	r3, r4
 8004946:	d908      	bls.n	800495a <_free_r+0x46>
 8004948:	6825      	ldr	r5, [r4, #0]
 800494a:	1961      	adds	r1, r4, r5
 800494c:	428b      	cmp	r3, r1
 800494e:	bf01      	itttt	eq
 8004950:	6819      	ldreq	r1, [r3, #0]
 8004952:	685b      	ldreq	r3, [r3, #4]
 8004954:	1949      	addeq	r1, r1, r5
 8004956:	6021      	streq	r1, [r4, #0]
 8004958:	e7ed      	b.n	8004936 <_free_r+0x22>
 800495a:	461a      	mov	r2, r3
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	b10b      	cbz	r3, 8004964 <_free_r+0x50>
 8004960:	42a3      	cmp	r3, r4
 8004962:	d9fa      	bls.n	800495a <_free_r+0x46>
 8004964:	6811      	ldr	r1, [r2, #0]
 8004966:	1855      	adds	r5, r2, r1
 8004968:	42a5      	cmp	r5, r4
 800496a:	d10b      	bne.n	8004984 <_free_r+0x70>
 800496c:	6824      	ldr	r4, [r4, #0]
 800496e:	4421      	add	r1, r4
 8004970:	1854      	adds	r4, r2, r1
 8004972:	42a3      	cmp	r3, r4
 8004974:	6011      	str	r1, [r2, #0]
 8004976:	d1e0      	bne.n	800493a <_free_r+0x26>
 8004978:	681c      	ldr	r4, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	6053      	str	r3, [r2, #4]
 800497e:	4421      	add	r1, r4
 8004980:	6011      	str	r1, [r2, #0]
 8004982:	e7da      	b.n	800493a <_free_r+0x26>
 8004984:	d902      	bls.n	800498c <_free_r+0x78>
 8004986:	230c      	movs	r3, #12
 8004988:	6003      	str	r3, [r0, #0]
 800498a:	e7d6      	b.n	800493a <_free_r+0x26>
 800498c:	6825      	ldr	r5, [r4, #0]
 800498e:	1961      	adds	r1, r4, r5
 8004990:	428b      	cmp	r3, r1
 8004992:	bf04      	itt	eq
 8004994:	6819      	ldreq	r1, [r3, #0]
 8004996:	685b      	ldreq	r3, [r3, #4]
 8004998:	6063      	str	r3, [r4, #4]
 800499a:	bf04      	itt	eq
 800499c:	1949      	addeq	r1, r1, r5
 800499e:	6021      	streq	r1, [r4, #0]
 80049a0:	6054      	str	r4, [r2, #4]
 80049a2:	e7ca      	b.n	800493a <_free_r+0x26>
 80049a4:	b003      	add	sp, #12
 80049a6:	bd30      	pop	{r4, r5, pc}
 80049a8:	20000574 	.word	0x20000574

080049ac <sbrk_aligned>:
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	4e0e      	ldr	r6, [pc, #56]	; (80049e8 <sbrk_aligned+0x3c>)
 80049b0:	460c      	mov	r4, r1
 80049b2:	6831      	ldr	r1, [r6, #0]
 80049b4:	4605      	mov	r5, r0
 80049b6:	b911      	cbnz	r1, 80049be <sbrk_aligned+0x12>
 80049b8:	f000 f8bc 	bl	8004b34 <_sbrk_r>
 80049bc:	6030      	str	r0, [r6, #0]
 80049be:	4621      	mov	r1, r4
 80049c0:	4628      	mov	r0, r5
 80049c2:	f000 f8b7 	bl	8004b34 <_sbrk_r>
 80049c6:	1c43      	adds	r3, r0, #1
 80049c8:	d00a      	beq.n	80049e0 <sbrk_aligned+0x34>
 80049ca:	1cc4      	adds	r4, r0, #3
 80049cc:	f024 0403 	bic.w	r4, r4, #3
 80049d0:	42a0      	cmp	r0, r4
 80049d2:	d007      	beq.n	80049e4 <sbrk_aligned+0x38>
 80049d4:	1a21      	subs	r1, r4, r0
 80049d6:	4628      	mov	r0, r5
 80049d8:	f000 f8ac 	bl	8004b34 <_sbrk_r>
 80049dc:	3001      	adds	r0, #1
 80049de:	d101      	bne.n	80049e4 <sbrk_aligned+0x38>
 80049e0:	f04f 34ff 	mov.w	r4, #4294967295
 80049e4:	4620      	mov	r0, r4
 80049e6:	bd70      	pop	{r4, r5, r6, pc}
 80049e8:	20000578 	.word	0x20000578

080049ec <_malloc_r>:
 80049ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f0:	1ccd      	adds	r5, r1, #3
 80049f2:	f025 0503 	bic.w	r5, r5, #3
 80049f6:	3508      	adds	r5, #8
 80049f8:	2d0c      	cmp	r5, #12
 80049fa:	bf38      	it	cc
 80049fc:	250c      	movcc	r5, #12
 80049fe:	2d00      	cmp	r5, #0
 8004a00:	4607      	mov	r7, r0
 8004a02:	db01      	blt.n	8004a08 <_malloc_r+0x1c>
 8004a04:	42a9      	cmp	r1, r5
 8004a06:	d905      	bls.n	8004a14 <_malloc_r+0x28>
 8004a08:	230c      	movs	r3, #12
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	2600      	movs	r6, #0
 8004a0e:	4630      	mov	r0, r6
 8004a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a14:	4e2e      	ldr	r6, [pc, #184]	; (8004ad0 <_malloc_r+0xe4>)
 8004a16:	f000 f89d 	bl	8004b54 <__malloc_lock>
 8004a1a:	6833      	ldr	r3, [r6, #0]
 8004a1c:	461c      	mov	r4, r3
 8004a1e:	bb34      	cbnz	r4, 8004a6e <_malloc_r+0x82>
 8004a20:	4629      	mov	r1, r5
 8004a22:	4638      	mov	r0, r7
 8004a24:	f7ff ffc2 	bl	80049ac <sbrk_aligned>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	d14d      	bne.n	8004aca <_malloc_r+0xde>
 8004a2e:	6834      	ldr	r4, [r6, #0]
 8004a30:	4626      	mov	r6, r4
 8004a32:	2e00      	cmp	r6, #0
 8004a34:	d140      	bne.n	8004ab8 <_malloc_r+0xcc>
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	4631      	mov	r1, r6
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	eb04 0803 	add.w	r8, r4, r3
 8004a40:	f000 f878 	bl	8004b34 <_sbrk_r>
 8004a44:	4580      	cmp	r8, r0
 8004a46:	d13a      	bne.n	8004abe <_malloc_r+0xd2>
 8004a48:	6821      	ldr	r1, [r4, #0]
 8004a4a:	3503      	adds	r5, #3
 8004a4c:	1a6d      	subs	r5, r5, r1
 8004a4e:	f025 0503 	bic.w	r5, r5, #3
 8004a52:	3508      	adds	r5, #8
 8004a54:	2d0c      	cmp	r5, #12
 8004a56:	bf38      	it	cc
 8004a58:	250c      	movcc	r5, #12
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	f7ff ffa5 	bl	80049ac <sbrk_aligned>
 8004a62:	3001      	adds	r0, #1
 8004a64:	d02b      	beq.n	8004abe <_malloc_r+0xd2>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	442b      	add	r3, r5
 8004a6a:	6023      	str	r3, [r4, #0]
 8004a6c:	e00e      	b.n	8004a8c <_malloc_r+0xa0>
 8004a6e:	6822      	ldr	r2, [r4, #0]
 8004a70:	1b52      	subs	r2, r2, r5
 8004a72:	d41e      	bmi.n	8004ab2 <_malloc_r+0xc6>
 8004a74:	2a0b      	cmp	r2, #11
 8004a76:	d916      	bls.n	8004aa6 <_malloc_r+0xba>
 8004a78:	1961      	adds	r1, r4, r5
 8004a7a:	42a3      	cmp	r3, r4
 8004a7c:	6025      	str	r5, [r4, #0]
 8004a7e:	bf18      	it	ne
 8004a80:	6059      	strne	r1, [r3, #4]
 8004a82:	6863      	ldr	r3, [r4, #4]
 8004a84:	bf08      	it	eq
 8004a86:	6031      	streq	r1, [r6, #0]
 8004a88:	5162      	str	r2, [r4, r5]
 8004a8a:	604b      	str	r3, [r1, #4]
 8004a8c:	4638      	mov	r0, r7
 8004a8e:	f104 060b 	add.w	r6, r4, #11
 8004a92:	f000 f865 	bl	8004b60 <__malloc_unlock>
 8004a96:	f026 0607 	bic.w	r6, r6, #7
 8004a9a:	1d23      	adds	r3, r4, #4
 8004a9c:	1af2      	subs	r2, r6, r3
 8004a9e:	d0b6      	beq.n	8004a0e <_malloc_r+0x22>
 8004aa0:	1b9b      	subs	r3, r3, r6
 8004aa2:	50a3      	str	r3, [r4, r2]
 8004aa4:	e7b3      	b.n	8004a0e <_malloc_r+0x22>
 8004aa6:	6862      	ldr	r2, [r4, #4]
 8004aa8:	42a3      	cmp	r3, r4
 8004aaa:	bf0c      	ite	eq
 8004aac:	6032      	streq	r2, [r6, #0]
 8004aae:	605a      	strne	r2, [r3, #4]
 8004ab0:	e7ec      	b.n	8004a8c <_malloc_r+0xa0>
 8004ab2:	4623      	mov	r3, r4
 8004ab4:	6864      	ldr	r4, [r4, #4]
 8004ab6:	e7b2      	b.n	8004a1e <_malloc_r+0x32>
 8004ab8:	4634      	mov	r4, r6
 8004aba:	6876      	ldr	r6, [r6, #4]
 8004abc:	e7b9      	b.n	8004a32 <_malloc_r+0x46>
 8004abe:	230c      	movs	r3, #12
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	f000 f84c 	bl	8004b60 <__malloc_unlock>
 8004ac8:	e7a1      	b.n	8004a0e <_malloc_r+0x22>
 8004aca:	6025      	str	r5, [r4, #0]
 8004acc:	e7de      	b.n	8004a8c <_malloc_r+0xa0>
 8004ace:	bf00      	nop
 8004ad0:	20000574 	.word	0x20000574

08004ad4 <_realloc_r>:
 8004ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad8:	4680      	mov	r8, r0
 8004ada:	4614      	mov	r4, r2
 8004adc:	460e      	mov	r6, r1
 8004ade:	b921      	cbnz	r1, 8004aea <_realloc_r+0x16>
 8004ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	f7ff bf81 	b.w	80049ec <_malloc_r>
 8004aea:	b92a      	cbnz	r2, 8004af8 <_realloc_r+0x24>
 8004aec:	f7ff ff12 	bl	8004914 <_free_r>
 8004af0:	4625      	mov	r5, r4
 8004af2:	4628      	mov	r0, r5
 8004af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004af8:	f000 f838 	bl	8004b6c <_malloc_usable_size_r>
 8004afc:	4284      	cmp	r4, r0
 8004afe:	4607      	mov	r7, r0
 8004b00:	d802      	bhi.n	8004b08 <_realloc_r+0x34>
 8004b02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b06:	d812      	bhi.n	8004b2e <_realloc_r+0x5a>
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	f7ff ff6e 	bl	80049ec <_malloc_r>
 8004b10:	4605      	mov	r5, r0
 8004b12:	2800      	cmp	r0, #0
 8004b14:	d0ed      	beq.n	8004af2 <_realloc_r+0x1e>
 8004b16:	42bc      	cmp	r4, r7
 8004b18:	4622      	mov	r2, r4
 8004b1a:	4631      	mov	r1, r6
 8004b1c:	bf28      	it	cs
 8004b1e:	463a      	movcs	r2, r7
 8004b20:	f7ff fed0 	bl	80048c4 <memcpy>
 8004b24:	4631      	mov	r1, r6
 8004b26:	4640      	mov	r0, r8
 8004b28:	f7ff fef4 	bl	8004914 <_free_r>
 8004b2c:	e7e1      	b.n	8004af2 <_realloc_r+0x1e>
 8004b2e:	4635      	mov	r5, r6
 8004b30:	e7df      	b.n	8004af2 <_realloc_r+0x1e>
	...

08004b34 <_sbrk_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	4d06      	ldr	r5, [pc, #24]	; (8004b50 <_sbrk_r+0x1c>)
 8004b38:	2300      	movs	r3, #0
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	4608      	mov	r0, r1
 8004b3e:	602b      	str	r3, [r5, #0]
 8004b40:	f7fc feb4 	bl	80018ac <_sbrk>
 8004b44:	1c43      	adds	r3, r0, #1
 8004b46:	d102      	bne.n	8004b4e <_sbrk_r+0x1a>
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	b103      	cbz	r3, 8004b4e <_sbrk_r+0x1a>
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	bd38      	pop	{r3, r4, r5, pc}
 8004b50:	2000057c 	.word	0x2000057c

08004b54 <__malloc_lock>:
 8004b54:	4801      	ldr	r0, [pc, #4]	; (8004b5c <__malloc_lock+0x8>)
 8004b56:	f000 b811 	b.w	8004b7c <__retarget_lock_acquire_recursive>
 8004b5a:	bf00      	nop
 8004b5c:	20000580 	.word	0x20000580

08004b60 <__malloc_unlock>:
 8004b60:	4801      	ldr	r0, [pc, #4]	; (8004b68 <__malloc_unlock+0x8>)
 8004b62:	f000 b80c 	b.w	8004b7e <__retarget_lock_release_recursive>
 8004b66:	bf00      	nop
 8004b68:	20000580 	.word	0x20000580

08004b6c <_malloc_usable_size_r>:
 8004b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b70:	1f18      	subs	r0, r3, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bfbc      	itt	lt
 8004b76:	580b      	ldrlt	r3, [r1, r0]
 8004b78:	18c0      	addlt	r0, r0, r3
 8004b7a:	4770      	bx	lr

08004b7c <__retarget_lock_acquire_recursive>:
 8004b7c:	4770      	bx	lr

08004b7e <__retarget_lock_release_recursive>:
 8004b7e:	4770      	bx	lr

08004b80 <_init>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	bf00      	nop
 8004b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b86:	bc08      	pop	{r3}
 8004b88:	469e      	mov	lr, r3
 8004b8a:	4770      	bx	lr

08004b8c <_fini>:
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8e:	bf00      	nop
 8004b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b92:	bc08      	pop	{r3}
 8004b94:	469e      	mov	lr, r3
 8004b96:	4770      	bx	lr
